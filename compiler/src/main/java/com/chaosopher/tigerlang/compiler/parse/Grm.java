
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Fri Nov 20 08:05:45 GMT 2020
//----------------------------------------------------

package com.chaosopher.tigerlang.compiler.parse;


/** CUP v0.10k generated parser.
  * @version Fri Nov 20 08:05:45 GMT 2020
  */
public class Grm extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Grm() {super();}

  /** Constructor which sets the default scanner. */
  public Grm(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\142\000\002\002\004\000\002\003\003\000\002\003" +
    "\003\000\002\025\003\000\002\025\004\000\002\022\003" +
    "\000\002\022\004\000\002\023\003\000\002\023\004\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\012\004\000\002\012\002\000\002\024" +
    "\006\000\002\026\003\000\002\026\003\000\002\026\003" +
    "\000\002\027\005\000\002\032\004\000\002\032\002\000" +
    "\002\033\005\000\002\033\002\000\002\031\005\000\002" +
    "\030\005\000\002\017\005\000\002\013\004\000\002\013" +
    "\002\000\002\014\005\000\002\014\002\000\002\020\011" +
    "\000\002\020\013\000\002\021\007\000\002\021\011\000" +
    "\002\016\006\000\002\016\010\000\002\041\003\000\002" +
    "\041\005\000\002\041\006\000\002\041\006\000\002\004" +
    "\003\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\004\000\002\054\004\000\002\044\005\000" +
    "\002\044\005\000\002\044\005\000\002\044\005\000\002" +
    "\044\005\000\002\044\005\000\002\044\005\000\002\044" +
    "\005\000\002\044\005\000\002\044\005\000\002\045\004" +
    "\000\002\045\006\000\002\046\005\000\002\046\002\000" +
    "\002\047\006\000\002\007\004\000\002\007\002\000\002" +
    "\010\005\000\002\010\002\000\002\005\004\000\002\005" +
    "\002\000\002\006\005\000\002\006\002\000\002\035\005" +
    "\000\002\050\006\000\002\051\010\000\002\051\005\000" +
    "\002\051\005\000\002\052\006\000\002\053\012\000\002" +
    "\011\007\000\002\042\010\000\002\034\006\000\002\037" +
    "\004\000\002\037\002\000\002\040\005\000\002\040\002" +
    "\000\002\036\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\271\000\044\002\ufff3\003\035\004\034\005\050\006" +
    "\011\012\007\022\014\037\033\042\046\043\013\046\047" +
    "\052\041\053\021\054\006\055\052\056\020\057\042\001" +
    "\002\000\004\002\273\001\002\000\016\002\ufffe\047\ufffe" +
    "\054\ufffe\055\ufffe\056\020\057\ufffe\001\002\000\004\004" +
    "\260\001\002\000\034\003\035\004\034\005\050\006\011" +
    "\012\007\013\251\022\014\037\033\042\046\043\013\046" +
    "\047\052\041\053\021\001\002\000\072\002\uffd1\007\uffd1" +
    "\011\uffd1\013\uffd1\015\uffd1\017\uffd1\021\uffd1\022\uffd1\023" +
    "\uffd1\024\uffd1\025\uffd1\026\uffd1\027\uffd1\030\uffd1\031\uffd1" +
    "\032\uffd1\033\uffd1\034\uffd1\040\uffd1\041\uffd1\044\uffd1\045" +
    "\uffd1\047\uffd1\050\uffd1\054\uffd1\055\uffd1\056\uffd1\057\uffd1" +
    "\001\002\000\072\002\uffd6\007\uffd6\011\uffd6\013\uffd6\015" +
    "\uffd6\017\uffd6\021\uffd6\022\uffd6\023\uffd6\024\uffd6\025\uffd6" +
    "\026\uffd6\027\uffd6\030\uffd6\031\uffd6\032\uffd6\033\uffd6\034" +
    "\uffd6\040\uffd6\041\uffd6\044\uffd6\045\uffd6\047\uffd6\050\uffd6" +
    "\054\uffd6\055\uffd6\056\uffd6\057\uffd6\001\002\000\016\002" +
    "\ufffa\047\ufffa\054\ufffa\055\ufffa\056\ufffa\057\042\001\002" +
    "\000\004\004\241\001\002\000\032\003\035\004\034\005" +
    "\050\006\011\012\007\022\014\037\033\042\046\043\013" +
    "\046\047\052\041\053\021\001\002\000\016\002\ufff7\047" +
    "\ufff7\054\ufff7\055\ufff7\056\ufff7\057\ufff7\001\002\000\100" +
    "\002\uffd8\007\uffd8\011\uffd8\013\uffd8\014\231\015\uffd8\017" +
    "\uffd8\020\233\021\uffd8\022\uffd8\023\uffd8\024\uffd8\025\uffd8" +
    "\026\uffd8\027\uffd8\030\uffd8\031\uffd8\032\uffd8\033\uffd8\034" +
    "\uffd8\035\232\040\uffd8\041\uffd8\044\uffd8\045\uffd8\047\uffd8" +
    "\050\uffd8\054\uffd8\055\uffd8\056\uffd8\057\uffd8\001\002\000" +
    "\016\002\ufffc\047\ufffc\054\006\055\ufffc\056\ufffc\057\ufffc" +
    "\001\002\000\004\004\225\001\002\000\072\002\uffd7\007" +
    "\uffd7\011\uffd7\013\uffd7\015\uffd7\017\uffd7\021\uffd7\022\uffd7" +
    "\023\uffd7\024\uffd7\025\uffd7\026\uffd7\027\uffd7\030\uffd7\031" +
    "\uffd7\032\uffd7\033\uffd7\034\uffd7\040\uffd7\041\uffd7\044\uffd7" +
    "\045\uffd7\047\uffd7\050\uffd7\054\uffd7\055\uffd7\056\uffd7\057" +
    "\uffd7\001\002\000\016\002\ufff5\047\ufff5\054\ufff5\055\ufff5" +
    "\056\ufff5\057\ufff5\001\002\000\072\002\uffd2\007\uffd2\011" +
    "\uffd2\013\uffd2\015\uffd2\017\uffd2\021\uffd2\022\uffd2\023\uffd2" +
    "\024\uffd2\025\uffd2\026\uffd2\027\uffd2\030\uffd2\031\uffd2\032" +
    "\uffd2\033\uffd2\034\uffd2\040\uffd2\041\uffd2\044\uffd2\045\uffd2" +
    "\047\uffd2\050\uffd2\054\uffd2\055\uffd2\056\uffd2\057\uffd2\001" +
    "\002\000\072\002\uffcb\007\uffcb\011\uffcb\013\uffcb\015\uffcb" +
    "\017\uffcb\021\uffcb\022\uffcb\023\uffcb\024\uffcb\025\uffcb\026" +
    "\uffcb\027\uffcb\030\uffcb\031\uffcb\032\uffcb\033\uffcb\034\uffcb" +
    "\040\uffcb\041\uffcb\044\uffcb\045\uffcb\047\uffcb\050\uffcb\054" +
    "\uffcb\055\uffcb\056\uffcb\057\uffcb\001\002\000\072\002\uffcd" +
    "\007\uffcd\011\uffcd\013\uffcd\015\uffcd\017\uffcd\021\uffcd\022" +
    "\uffcd\023\uffcd\024\uffcd\025\uffcd\026\uffcd\027\uffcd\030\uffcd" +
    "\031\uffcd\032\uffcd\033\uffcd\034\uffcd\040\uffcd\041\uffcd\044" +
    "\uffcd\045\uffcd\047\uffcd\050\uffcd\054\uffcd\055\uffcd\056\uffcd" +
    "\057\uffcd\001\002\000\072\002\uffcf\007\uffcf\011\uffcf\013" +
    "\uffcf\015\uffcf\017\uffcf\021\uffcf\022\uffcf\023\uffcf\024\uffcf" +
    "\025\uffcf\026\uffcf\027\uffcf\030\uffcf\031\uffcf\032\uffcf\033" +
    "\uffcf\034\uffcf\040\uffcf\041\uffcf\044\uffcf\045\uffcf\047\uffcf" +
    "\050\uffcf\054\uffcf\055\uffcf\056\uffcf\057\uffcf\001\002\000" +
    "\072\002\uffc8\007\uffc8\011\uffc8\013\uffc8\015\uffc8\017\uffc8" +
    "\021\uffc8\022\uffc8\023\uffc8\024\uffc8\025\uffc8\026\uffc8\027" +
    "\uffc8\030\uffc8\031\uffc8\032\uffc8\033\uffc8\034\uffc8\040\uffc8" +
    "\041\uffc8\044\uffc8\045\uffc8\047\uffc8\050\uffc8\054\uffc8\055" +
    "\uffc8\056\uffc8\057\uffc8\001\002\000\016\002\ufff8\047\ufff8" +
    "\054\ufff8\055\ufff8\056\ufff8\057\ufff8\001\002\000\072\002" +
    "\uffd0\007\uffd0\011\uffd0\013\uffd0\015\uffd0\017\uffd0\021\uffd0" +
    "\022\uffd0\023\uffd0\024\uffd0\025\uffd0\026\uffd0\027\uffd0\030" +
    "\uffd0\031\uffd0\032\uffd0\033\uffd0\034\uffd0\040\uffd0\041\uffd0" +
    "\044\uffd0\045\uffd0\047\uffd0\050\uffd0\054\uffd0\055\uffd0\056" +
    "\uffd0\057\uffd0\001\002\000\016\002\ufff3\047\ufff3\054\006" +
    "\055\052\056\020\057\042\001\002\000\032\003\035\004" +
    "\034\005\050\006\011\012\007\022\014\037\033\042\046" +
    "\043\013\046\047\052\041\053\021\001\002\000\104\002" +
    "\uffdc\007\uffdc\011\uffdc\012\171\013\uffdc\014\170\015\uffdc" +
    "\016\167\017\uffdc\020\uffdc\021\uffdc\022\uffdc\023\uffdc\024" +
    "\uffdc\025\uffdc\026\uffdc\027\uffdc\030\uffdc\031\uffdc\032\uffdc" +
    "\033\uffdc\034\uffdc\035\uffdc\040\uffdc\041\uffdc\044\uffdc\045" +
    "\uffdc\047\uffdc\050\uffdc\054\uffdc\055\uffdc\056\uffdc\057\uffdc" +
    "\001\002\000\032\003\035\004\034\005\050\006\011\012" +
    "\007\022\014\037\033\042\046\043\013\046\047\052\041" +
    "\053\021\001\002\000\072\002\uffce\007\uffce\011\uffce\013" +
    "\uffce\015\uffce\017\uffce\021\uffce\022\uffce\023\uffce\024\uffce" +
    "\025\uffce\026\uffce\027\uffce\030\uffce\031\uffce\032\uffce\033" +
    "\uffce\034\uffce\040\uffce\041\uffce\044\uffce\045\uffce\047\uffce" +
    "\050\uffce\054\uffce\055\uffce\056\uffce\057\uffce\001\002\000" +
    "\004\002\uffff\001\002\000\072\002\uffcc\007\uffcc\011\uffcc" +
    "\013\uffcc\015\uffcc\017\uffcc\021\uffcc\022\uffcc\023\uffcc\024" +
    "\uffcc\025\uffcc\026\uffcc\027\uffcc\030\uffcc\031\uffcc\032\uffcc" +
    "\033\uffcc\034\uffcc\040\uffcc\041\uffcc\044\uffcc\045\uffcc\047" +
    "\uffcc\050\uffcc\054\uffcc\055\uffcc\056\uffcc\057\uffcc\001\002" +
    "\000\072\002\uffc9\007\uffc9\011\uffc9\013\uffc9\015\uffc9\017" +
    "\uffc9\021\uffc9\022\uffc9\023\uffc9\024\uffc9\025\uffc9\026\uffc9" +
    "\027\uffc9\030\uffc9\031\uffc9\032\uffc9\033\uffc9\034\uffc9\040" +
    "\uffc9\041\uffc9\044\uffc9\045\uffc9\047\uffc9\050\uffc9\054\uffc9" +
    "\055\uffc9\056\uffc9\057\uffc9\001\002\000\004\004\150\001" +
    "\002\000\072\002\uffca\007\uffca\011\uffca\013\uffca\015\uffca" +
    "\017\uffca\021\uffca\022\uffca\023\uffca\024\uffca\025\uffca\026" +
    "\uffca\027\uffca\030\uffca\031\uffca\032\uffca\033\uffca\034\uffca" +
    "\040\uffca\041\uffca\044\uffca\045\uffca\047\uffca\050\uffca\054" +
    "\uffca\055\uffca\056\uffca\057\uffca\001\002\000\072\002\uffd4" +
    "\007\uffd4\011\uffd4\013\uffd4\015\uffd4\017\uffd4\021\uffd4\022" +
    "\uffd4\023\uffd4\024\uffd4\025\uffd4\026\uffd4\027\uffd4\030\uffd4" +
    "\031\uffd4\032\uffd4\033\uffd4\034\uffd4\040\uffd4\041\uffd4\044" +
    "\uffd4\045\uffd4\047\uffd4\050\uffd4\054\uffd4\055\uffd4\056\uffd4" +
    "\057\uffd4\001\002\000\072\002\uffd3\007\uffd3\011\uffd3\013" +
    "\uffd3\015\uffd3\017\uffd3\021\uffd3\022\uffd3\023\uffd3\024\uffd3" +
    "\025\uffd3\026\uffd3\027\uffd3\030\uffd3\031\uffd3\032\uffd3\033" +
    "\uffd3\034\uffd3\040\uffd3\041\uffd3\044\uffd3\045\uffd3\047\uffd3" +
    "\050\uffd3\054\uffd3\055\uffd3\056\uffd3\057\uffd3\001\002\000" +
    "\032\003\035\004\034\005\050\006\011\012\007\022\014" +
    "\037\033\042\046\043\013\046\047\052\041\053\021\001" +
    "\002\000\014\047\ufff3\054\006\055\052\056\020\057\042" +
    "\001\002\000\072\002\uffd5\007\uffd5\011\uffd5\013\uffd5\015" +
    "\uffd5\017\uffd5\021\uffd5\022\uffd5\023\uffd5\024\uffd5\025\uffd5" +
    "\026\uffd5\027\uffd5\030\uffd5\031\uffd5\032\uffd5\033\uffd5\034" +
    "\uffd5\040\uffd5\041\uffd5\044\uffd5\045\uffd5\047\uffd5\050\uffd5" +
    "\054\uffd5\055\uffd5\056\uffd5\057\uffd5\001\002\000\016\002" +
    "\ufff6\047\ufff6\054\ufff6\055\ufff6\056\ufff6\057\ufff6\001\002" +
    "\000\004\004\104\001\002\000\034\002\000\021\061\022" +
    "\054\023\065\024\056\025\062\026\060\027\066\030\063" +
    "\031\064\032\057\033\055\034\067\001\002\000\032\003" +
    "\035\004\034\005\050\006\011\012\007\022\014\037\033" +
    "\042\046\043\013\046\047\052\041\053\021\001\002\000" +
    "\032\003\035\004\034\005\050\006\011\012\007\022\014" +
    "\037\033\042\046\043\013\046\047\052\041\053\021\001" +
    "\002\000\032\003\035\004\034\005\050\006\011\012\007" +
    "\022\014\037\033\042\046\043\013\046\047\052\041\053" +
    "\021\001\002\000\032\003\035\004\034\005\050\006\011" +
    "\012\007\022\014\037\033\042\046\043\013\046\047\052" +
    "\041\053\021\001\002\000\032\003\035\004\034\005\050" +
    "\006\011\012\007\022\014\037\033\042\046\043\013\046" +
    "\047\052\041\053\021\001\002\000\032\003\035\004\034" +
    "\005\050\006\011\012\007\022\014\037\033\042\046\043" +
    "\013\046\047\052\041\053\021\001\002\000\032\003\035" +
    "\004\034\005\050\006\011\012\007\022\014\037\033\042" +
    "\046\043\013\046\047\052\041\053\021\001\002\000\032" +
    "\003\035\004\034\005\050\006\011\012\007\022\014\037" +
    "\033\042\046\043\013\046\047\052\041\053\021\001\002" +
    "\000\032\003\035\004\034\005\050\006\011\012\007\022" +
    "\014\037\033\042\046\043\013\046\047\052\041\053\021" +
    "\001\002\000\032\003\035\004\034\005\050\006\011\012" +
    "\007\022\014\037\033\042\046\043\013\046\047\052\041" +
    "\053\021\001\002\000\032\003\035\004\034\005\050\006" +
    "\011\012\007\022\014\037\033\042\046\043\013\046\047" +
    "\052\041\053\021\001\002\000\032\003\035\004\034\005" +
    "\050\006\011\012\007\022\014\037\033\042\046\043\013" +
    "\046\047\052\041\053\021\001\002\000\072\002\uffaa\007" +
    "\uffaa\011\uffaa\013\uffaa\015\uffaa\017\uffaa\021\061\022\054" +
    "\023\065\024\056\025\062\026\060\027\066\030\063\031" +
    "\064\032\057\033\uffaa\034\uffaa\040\uffaa\041\uffaa\044\uffaa" +
    "\045\uffaa\047\uffaa\050\uffaa\054\uffaa\055\uffaa\056\uffaa\057" +
    "\uffaa\001\002\000\056\002\uffbe\007\uffbe\011\uffbe\013\uffbe" +
    "\015\uffbe\017\uffbe\021\061\022\054\023\065\024\056\033" +
    "\uffbe\034\uffbe\040\uffbe\041\uffbe\044\uffbe\045\uffbe\047\uffbe" +
    "\050\uffbe\054\uffbe\055\uffbe\056\uffbe\057\uffbe\001\002\000" +
    "\072\002\uffc3\007\uffc3\011\uffc3\013\uffc3\015\uffc3\017\uffc3" +
    "\021\uffc3\022\uffc3\023\uffc3\024\uffc3\025\uffc3\026\uffc3\027" +
    "\uffc3\030\uffc3\031\uffc3\032\uffc3\033\uffc3\034\uffc3\040\uffc3" +
    "\041\uffc3\044\uffc3\045\uffc3\047\uffc3\050\uffc3\054\uffc3\055" +
    "\uffc3\056\uffc3\057\uffc3\001\002\000\056\002\uffbf\007\uffbf" +
    "\011\uffbf\013\uffbf\015\uffbf\017\uffbf\021\061\022\054\023" +
    "\065\024\056\033\uffbf\034\uffbf\040\uffbf\041\uffbf\044\uffbf" +
    "\045\uffbf\047\uffbf\050\uffbf\054\uffbf\055\uffbf\056\uffbf\057" +
    "\uffbf\001\002\000\056\002\uffbc\007\uffbc\011\uffbc\013\uffbc" +
    "\015\uffbc\017\uffbc\021\061\022\054\023\065\024\056\033" +
    "\uffbc\034\uffbc\040\uffbc\041\uffbc\044\uffbc\045\uffbc\047\uffbc" +
    "\050\uffbc\054\uffbc\055\uffbc\056\uffbc\057\uffbc\001\002\000" +
    "\056\002\uffc1\007\uffc1\011\uffc1\013\uffc1\015\uffc1\017\uffc1" +
    "\021\061\022\054\023\065\024\056\033\uffc1\034\uffc1\040" +
    "\uffc1\041\uffc1\044\uffc1\045\uffc1\047\uffc1\050\uffc1\054\uffc1" +
    "\055\uffc1\056\uffc1\057\uffc1\001\002\000\072\002\uffc5\007" +
    "\uffc5\011\uffc5\013\uffc5\015\uffc5\017\uffc5\021\uffc5\022\uffc5" +
    "\023\065\024\056\025\uffc5\026\uffc5\027\uffc5\030\uffc5\031" +
    "\uffc5\032\uffc5\033\uffc5\034\uffc5\040\uffc5\041\uffc5\044\uffc5" +
    "\045\uffc5\047\uffc5\050\uffc5\054\uffc5\055\uffc5\056\uffc5\057" +
    "\uffc5\001\002\000\056\002\uffc0\007\uffc0\011\uffc0\013\uffc0" +
    "\015\uffc0\017\uffc0\021\061\022\054\023\065\024\056\033" +
    "\uffc0\034\uffc0\040\uffc0\041\uffc0\044\uffc0\045\uffc0\047\uffc0" +
    "\050\uffc0\054\uffc0\055\uffc0\056\uffc0\057\uffc0\001\002\000" +
    "\056\002\uffbd\007\uffbd\011\uffbd\013\uffbd\015\uffbd\017\uffbd" +
    "\021\061\022\054\023\065\024\056\033\uffbd\034\uffbd\040" +
    "\uffbd\041\uffbd\044\uffbd\045\uffbd\047\uffbd\050\uffbd\054\uffbd" +
    "\055\uffbd\056\uffbd\057\uffbd\001\002\000\072\002\uffc2\007" +
    "\uffc2\011\uffc2\013\uffc2\015\uffc2\017\uffc2\021\uffc2\022\uffc2" +
    "\023\uffc2\024\uffc2\025\uffc2\026\uffc2\027\uffc2\030\uffc2\031" +
    "\uffc2\032\uffc2\033\uffc2\034\uffc2\040\uffc2\041\uffc2\044\uffc2" +
    "\045\uffc2\047\uffc2\050\uffc2\054\uffc2\055\uffc2\056\uffc2\057" +
    "\uffc2\001\002\000\072\002\uffab\007\uffab\011\uffab\013\uffab" +
    "\015\uffab\017\uffab\021\061\022\054\023\065\024\056\025" +
    "\062\026\060\027\066\030\063\031\064\032\057\033\uffab" +
    "\034\uffab\040\uffab\041\uffab\044\uffab\045\uffab\047\uffab\050" +
    "\uffab\054\uffab\055\uffab\056\uffab\057\uffab\001\002\000\072" +
    "\002\uffc4\007\uffc4\011\uffc4\013\uffc4\015\uffc4\017\uffc4\021" +
    "\uffc4\022\uffc4\023\065\024\056\025\uffc4\026\uffc4\027\uffc4" +
    "\030\uffc4\031\uffc4\032\uffc4\033\uffc4\034\uffc4\040\uffc4\041" +
    "\uffc4\044\uffc4\045\uffc4\047\uffc4\050\uffc4\054\uffc4\055\uffc4" +
    "\056\uffc4\057\uffc4\001\002\000\006\010\105\035\106\001" +
    "\002\000\010\004\111\016\112\036\115\001\002\000\032" +
    "\003\035\004\034\005\050\006\011\012\007\022\014\037" +
    "\033\042\046\043\013\046\047\052\041\053\021\001\002" +
    "\000\046\002\uffde\021\061\022\054\023\065\024\056\025" +
    "\062\026\060\027\066\030\063\031\064\032\057\033\055" +
    "\034\067\047\uffde\054\uffde\055\uffde\056\uffde\057\uffde\001" +
    "\002\000\004\035\132\001\002\000\024\002\ufff1\007\ufff1" +
    "\013\ufff1\035\ufff1\047\ufff1\054\ufff1\055\ufff1\056\ufff1\057" +
    "\ufff1\001\002\000\006\004\120\017\uffec\001\002\000\024" +
    "\002\uffef\007\uffef\013\uffef\035\uffef\047\uffef\054\uffef\055" +
    "\uffef\056\uffef\057\uffef\001\002\000\024\002\ufff0\007\ufff0" +
    "\013\ufff0\035\ufff0\047\ufff0\054\ufff0\055\ufff0\056\ufff0\057" +
    "\ufff0\001\002\000\004\051\116\001\002\000\004\004\117" +
    "\001\002\000\024\002\uffee\007\uffee\013\uffee\035\uffee\047" +
    "\uffee\054\uffee\055\uffee\056\uffee\057\uffee\001\002\000\004" +
    "\010\130\001\002\000\004\017\127\001\002\000\006\007" +
    "\123\017\uffea\001\002\000\004\004\120\001\002\000\004" +
    "\017\uffed\001\002\000\006\007\123\017\uffea\001\002\000" +
    "\004\017\uffeb\001\002\000\024\002\uffe8\007\uffe8\013\uffe8" +
    "\035\uffe8\047\uffe8\054\uffe8\055\uffe8\056\uffe8\057\uffe8\001" +
    "\002\000\004\004\131\001\002\000\006\007\uffe9\017\uffe9" +
    "\001\002\000\032\003\035\004\034\005\050\006\011\012" +
    "\007\022\014\037\033\042\046\043\013\046\047\052\041" +
    "\053\021\001\002\000\046\002\uffdd\021\061\022\054\023" +
    "\065\024\056\025\062\026\060\027\066\030\063\031\064" +
    "\032\057\033\055\034\067\047\uffdd\054\uffdd\055\uffdd\056" +
    "\uffdd\057\uffdd\001\002\000\004\047\135\001\002\000\034" +
    "\003\035\004\034\005\050\006\011\012\007\022\014\037" +
    "\033\042\046\043\013\046\047\050\uffb1\052\041\053\021" +
    "\001\002\000\036\011\142\021\061\022\054\023\065\024" +
    "\056\025\062\026\060\027\066\030\063\031\064\032\057" +
    "\033\055\034\067\050\uffaf\001\002\000\004\050\140\001" +
    "\002\000\072\002\uffa7\007\uffa7\011\uffa7\013\uffa7\015\uffa7" +
    "\017\uffa7\021\uffa7\022\uffa7\023\uffa7\024\uffa7\025\uffa7\026" +
    "\uffa7\027\uffa7\030\uffa7\031\uffa7\032\uffa7\033\uffa7\034\uffa7" +
    "\040\uffa7\041\uffa7\044\uffa7\045\uffa7\047\uffa7\050\uffa7\054" +
    "\uffa7\055\uffa7\056\uffa7\057\uffa7\001\002\000\004\050\uffb2" +
    "\001\002\000\032\003\035\004\034\005\050\006\011\012" +
    "\007\022\014\037\033\042\046\043\013\046\047\052\041" +
    "\053\021\001\002\000\036\011\142\021\061\022\054\023" +
    "\065\024\056\025\062\026\060\027\066\030\063\031\064" +
    "\032\057\033\055\034\067\050\uffaf\001\002\000\004\050" +
    "\uffb0\001\002\000\034\021\061\022\054\023\065\024\056" +
    "\025\062\026\060\027\066\030\063\031\064\032\057\033" +
    "\055\034\067\045\146\001\002\000\032\003\035\004\034" +
    "\005\050\006\011\012\007\022\014\037\033\042\046\043" +
    "\013\046\047\052\041\053\021\001\002\000\072\002\uffa9" +
    "\007\uffa9\011\uffa9\013\uffa9\015\uffa9\017\uffa9\021\061\022" +
    "\054\023\065\024\056\025\062\026\060\027\066\030\063" +
    "\031\064\032\057\033\055\034\067\040\uffa9\041\uffa9\044" +
    "\uffa9\045\uffa9\047\uffa9\050\uffa9\054\uffa9\055\uffa9\056\uffa9" +
    "\057\uffa9\001\002\000\004\012\151\001\002\000\006\004" +
    "\152\013\uffe5\001\002\000\004\010\164\001\002\000\004" +
    "\013\161\001\002\000\006\007\155\013\uffe3\001\002\000" +
    "\004\004\152\001\002\000\004\013\uffe6\001\002\000\006" +
    "\007\155\013\uffe3\001\002\000\004\013\uffe4\001\002\000" +
    "\020\002\uffe0\010\162\047\uffe0\054\uffe0\055\uffe0\056\uffe0" +
    "\057\uffe0\001\002\000\004\004\163\001\002\000\016\002" +
    "\uffdf\047\uffdf\054\uffdf\055\uffdf\056\uffdf\057\uffdf\001\002" +
    "\000\010\004\111\016\112\036\115\001\002\000\006\007" +
    "\uffe7\013\uffe7\001\002\000\072\002\uffc7\007\uffc7\011\uffc7" +
    "\013\uffc7\015\uffc7\017\uffc7\021\061\022\054\023\065\024" +
    "\056\025\062\026\060\027\066\030\063\031\064\032\057" +
    "\033\055\034\067\040\uffc7\041\uffc7\044\uffc7\045\uffc7\047" +
    "\uffc7\050\uffc7\054\uffc7\055\uffc7\056\uffc7\057\uffc7\001\002" +
    "\000\006\004\205\017\uffa3\001\002\000\032\003\035\004" +
    "\034\005\050\006\011\012\007\022\014\037\033\042\046" +
    "\043\013\046\047\052\041\053\021\001\002\000\034\003" +
    "\035\004\034\005\050\006\011\012\007\013\uffb5\022\014" +
    "\037\033\042\046\043\013\046\047\052\041\053\021\001" +
    "\002\000\004\013\200\001\002\000\036\007\175\013\uffb3" +
    "\021\061\022\054\023\065\024\056\025\062\026\060\027" +
    "\066\030\063\031\064\032\057\033\055\034\067\001\002" +
    "\000\004\013\uffb6\001\002\000\032\003\035\004\034\005" +
    "\050\006\011\012\007\022\014\037\033\042\046\043\013" +
    "\046\047\052\041\053\021\001\002\000\036\007\175\013" +
    "\uffb3\021\061\022\054\023\065\024\056\025\062\026\060" +
    "\027\066\030\063\031\064\032\057\033\055\034\067\001" +
    "\002\000\004\013\uffb4\001\002\000\072\002\uffb7\007\uffb7" +
    "\011\uffb7\013\uffb7\015\uffb7\017\uffb7\021\uffb7\022\uffb7\023" +
    "\uffb7\024\uffb7\025\uffb7\026\uffb7\027\uffb7\030\uffb7\031\uffb7" +
    "\032\uffb7\033\uffb7\034\uffb7\040\uffb7\041\uffb7\044\uffb7\045" +
    "\uffb7\047\uffb7\050\uffb7\054\uffb7\055\uffb7\056\uffb7\057\uffb7" +
    "\001\002\000\034\015\202\021\061\022\054\023\065\024" +
    "\056\025\062\026\060\027\066\030\063\031\064\032\057" +
    "\033\055\034\067\001\002\000\102\002\uffd9\007\uffd9\011" +
    "\uffd9\013\uffd9\014\uffd9\015\uffd9\017\uffd9\020\uffd9\021\uffd9" +
    "\022\uffd9\023\uffd9\024\uffd9\025\uffd9\026\uffd9\027\uffd9\030" +
    "\uffd9\031\uffd9\032\uffd9\033\uffd9\034\uffd9\035\uffd9\040\uffd9" +
    "\041\uffd9\044\uffd9\045\uffd9\047\uffd9\050\uffd9\051\203\054" +
    "\uffd9\055\uffd9\056\uffd9\057\uffd9\001\002\000\032\003\035" +
    "\004\034\005\050\006\011\012\007\022\014\037\033\042" +
    "\046\043\013\046\047\052\041\053\021\001\002\000\072" +
    "\002\uffa6\007\uffa6\011\uffa6\013\uffa6\015\uffa6\017\uffa6\021" +
    "\061\022\054\023\065\024\056\025\062\026\060\027\066" +
    "\030\063\031\064\032\057\033\055\034\067\040\uffa6\041" +
    "\uffa6\044\uffa6\045\uffa6\047\uffa6\050\uffa6\054\uffa6\055\uffa6" +
    "\056\uffa6\057\uffa6\001\002\000\004\025\215\001\002\000" +
    "\004\017\214\001\002\000\006\007\210\017\uffa1\001\002" +
    "\000\004\004\205\001\002\000\004\017\uffa4\001\002\000" +
    "\006\007\210\017\uffa1\001\002\000\004\017\uffa2\001\002" +
    "\000\072\002\uffa5\007\uffa5\011\uffa5\013\uffa5\015\uffa5\017" +
    "\uffa5\021\uffa5\022\uffa5\023\uffa5\024\uffa5\025\uffa5\026\uffa5" +
    "\027\uffa5\030\uffa5\031\uffa5\032\uffa5\033\uffa5\034\uffa5\040" +
    "\uffa5\041\uffa5\044\uffa5\045\uffa5\047\uffa5\050\uffa5\054\uffa5" +
    "\055\uffa5\056\uffa5\057\uffa5\001\002\000\032\003\035\004" +
    "\034\005\050\006\011\012\007\022\014\037\033\042\046" +
    "\043\013\046\047\052\041\053\021\001\002\000\036\007" +
    "\uffa0\017\uffa0\021\061\022\054\023\065\024\056\025\062" +
    "\026\060\027\066\030\063\031\064\032\057\033\055\034" +
    "\067\001\002\000\034\021\061\022\054\023\065\024\056" +
    "\025\062\026\060\027\066\030\063\031\064\032\057\033" +
    "\055\034\067\040\220\001\002\000\032\003\035\004\034" +
    "\005\050\006\011\012\007\022\014\037\033\042\046\043" +
    "\013\046\047\052\041\053\021\001\002\000\072\002\uffad" +
    "\007\uffad\011\uffad\013\uffad\015\uffad\017\uffad\021\061\022" +
    "\054\023\065\024\056\025\062\026\060\027\066\030\063" +
    "\031\064\032\057\033\055\034\067\040\uffad\041\222\044" +
    "\uffad\045\uffad\047\uffad\050\uffad\054\uffad\055\uffad\056\uffad" +
    "\057\uffad\001\002\000\032\003\035\004\034\005\050\006" +
    "\011\012\007\022\014\037\033\042\046\043\013\046\047" +
    "\052\041\053\021\001\002\000\072\002\uffac\007\uffac\011" +
    "\uffac\013\uffac\015\uffac\017\uffac\021\061\022\054\023\065" +
    "\024\056\025\062\026\060\027\066\030\063\031\064\032" +
    "\057\033\055\034\067\040\uffac\041\uffac\044\uffac\045\uffac" +
    "\047\uffac\050\uffac\054\uffac\055\uffac\056\uffac\057\uffac\001" +
    "\002\000\006\002\ufff4\047\ufff4\001\002\000\004\025\226" +
    "\001\002\000\010\004\111\016\112\036\115\001\002\000" +
    "\016\002\ufff2\047\ufff2\054\ufff2\055\ufff2\056\ufff2\057\ufff2" +
    "\001\002\000\016\002\ufffb\047\ufffb\054\ufffb\055\ufffb\056" +
    "\ufffb\057\ufffb\001\002\000\032\003\035\004\034\005\050" +
    "\006\011\012\007\022\014\037\033\042\046\043\013\046" +
    "\047\052\041\053\021\001\002\000\032\003\035\004\034" +
    "\005\050\006\011\012\007\022\014\037\033\042\046\043" +
    "\013\046\047\052\041\053\021\001\002\000\004\004\234" +
    "\001\002\000\100\002\uffdb\007\uffdb\011\uffdb\013\uffdb\014" +
    "\uffdb\015\uffdb\017\uffdb\020\uffdb\021\uffdb\022\uffdb\023\uffdb" +
    "\024\uffdb\025\uffdb\026\uffdb\027\uffdb\030\uffdb\031\uffdb\032" +
    "\uffdb\033\uffdb\034\uffdb\035\uffdb\040\uffdb\041\uffdb\044\uffdb" +
    "\045\uffdb\047\uffdb\050\uffdb\054\uffdb\055\uffdb\056\uffdb\057" +
    "\uffdb\001\002\000\072\002\uffae\007\uffae\011\uffae\013\uffae" +
    "\015\uffae\017\uffae\021\061\022\054\023\065\024\056\025" +
    "\062\026\060\027\066\030\063\031\064\032\057\033\055" +
    "\034\067\040\uffae\041\uffae\044\uffae\045\uffae\047\uffae\050" +
    "\uffae\054\uffae\055\uffae\056\uffae\057\uffae\001\002\000\034" +
    "\015\237\021\061\022\054\023\065\024\056\025\062\026" +
    "\060\027\066\030\063\031\064\032\057\033\055\034\067" +
    "\001\002\000\100\002\uffda\007\uffda\011\uffda\013\uffda\014" +
    "\uffda\015\uffda\017\uffda\020\uffda\021\uffda\022\uffda\023\uffda" +
    "\024\uffda\025\uffda\026\uffda\027\uffda\030\uffda\031\uffda\032" +
    "\uffda\033\uffda\034\uffda\035\uffda\040\uffda\041\uffda\044\uffda" +
    "\045\uffda\047\uffda\050\uffda\054\uffda\055\uffda\056\uffda\057" +
    "\uffda\001\002\000\072\002\uffc6\007\uffc6\011\uffc6\013\uffc6" +
    "\015\uffc6\017\uffc6\021\uffc6\022\uffc6\023\065\024\056\025" +
    "\uffc6\026\uffc6\027\uffc6\030\uffc6\031\uffc6\032\uffc6\033\uffc6" +
    "\034\uffc6\040\uffc6\041\uffc6\044\uffc6\045\uffc6\047\uffc6\050" +
    "\uffc6\054\uffc6\055\uffc6\056\uffc6\057\uffc6\001\002\000\004" +
    "\035\242\001\002\000\032\003\035\004\034\005\050\006" +
    "\011\012\007\022\014\037\033\042\046\043\013\046\047" +
    "\052\041\053\021\001\002\000\034\021\061\022\054\023" +
    "\065\024\056\025\062\026\060\027\066\030\063\031\064" +
    "\032\057\033\055\034\067\044\244\001\002\000\032\003" +
    "\035\004\034\005\050\006\011\012\007\022\014\037\033" +
    "\042\046\043\013\046\047\052\041\053\021\001\002\000" +
    "\034\021\061\022\054\023\065\024\056\025\062\026\060" +
    "\027\066\030\063\031\064\032\057\033\055\034\067\045" +
    "\246\001\002\000\032\003\035\004\034\005\050\006\011" +
    "\012\007\022\014\037\033\042\046\043\013\046\047\052" +
    "\041\053\021\001\002\000\072\002\uffa8\007\uffa8\011\uffa8" +
    "\013\uffa8\015\uffa8\017\uffa8\021\061\022\054\023\065\024" +
    "\056\025\062\026\060\027\066\030\063\031\064\032\057" +
    "\033\055\034\067\040\uffa8\041\uffa8\044\uffa8\045\uffa8\047" +
    "\uffa8\050\uffa8\054\uffa8\055\uffa8\056\uffa8\057\uffa8\001\002" +
    "\000\016\002\ufff9\047\ufff9\054\ufff9\055\ufff9\056\ufff9\057" +
    "\ufff9\001\002\000\072\002\uffbb\007\uffbb\011\uffbb\013\uffbb" +
    "\015\uffbb\017\uffbb\021\uffbb\022\uffbb\023\uffbb\024\uffbb\025" +
    "\uffbb\026\uffbb\027\uffbb\030\uffbb\031\uffbb\032\uffbb\033\uffbb" +
    "\034\uffbb\040\uffbb\041\uffbb\044\uffbb\045\uffbb\047\uffbb\050" +
    "\uffbb\054\uffbb\055\uffbb\056\uffbb\057\uffbb\001\002\000\036" +
    "\011\254\013\uffb8\021\061\022\054\023\065\024\056\025" +
    "\062\026\060\027\066\030\063\031\064\032\057\033\055" +
    "\034\067\001\002\000\004\013\257\001\002\000\032\003" +
    "\035\004\034\005\050\006\011\012\007\022\014\037\033" +
    "\042\046\043\013\046\047\052\041\053\021\001\002\000" +
    "\036\011\254\013\uffb8\021\061\022\054\023\065\024\056" +
    "\025\062\026\060\027\066\030\063\031\064\032\057\033" +
    "\055\034\067\001\002\000\004\013\uffb9\001\002\000\072" +
    "\002\uffba\007\uffba\011\uffba\013\uffba\015\uffba\017\uffba\021" +
    "\uffba\022\uffba\023\uffba\024\uffba\025\uffba\026\uffba\027\uffba" +
    "\030\uffba\031\uffba\032\uffba\033\uffba\034\uffba\040\uffba\041" +
    "\uffba\044\uffba\045\uffba\047\uffba\050\uffba\054\uffba\055\uffba" +
    "\056\uffba\057\uffba\001\002\000\004\012\261\001\002\000" +
    "\006\004\152\013\uffe5\001\002\000\004\013\263\001\002" +
    "\000\006\010\265\025\264\001\002\000\032\003\035\004" +
    "\034\005\050\006\011\012\007\022\014\037\033\042\046" +
    "\043\013\046\047\052\041\053\021\001\002\000\004\004" +
    "\266\001\002\000\004\025\267\001\002\000\032\003\035" +
    "\004\034\005\050\006\011\012\007\022\014\037\033\042" +
    "\046\043\013\046\047\052\041\053\021\001\002\000\046" +
    "\002\uffe1\021\061\022\054\023\065\024\056\025\062\026" +
    "\060\027\066\030\063\031\064\032\057\033\055\034\067" +
    "\047\uffe1\054\uffe1\055\uffe1\056\uffe1\057\uffe1\001\002\000" +
    "\046\002\uffe2\021\061\022\054\023\065\024\056\025\062" +
    "\026\060\027\066\030\063\031\064\032\057\033\055\034" +
    "\067\047\uffe2\054\uffe2\055\uffe2\056\uffe2\057\uffe2\001\002" +
    "\000\016\002\ufffd\047\ufffd\054\ufffd\055\ufffd\056\ufffd\057" +
    "\ufffd\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\271\000\062\003\003\004\052\011\026\012\036\015" +
    "\031\016\014\020\016\021\011\022\050\023\021\024\004" +
    "\025\027\034\030\035\025\041\015\042\007\044\022\045" +
    "\043\047\044\050\037\051\024\052\023\053\042\054\035" +
    "\001\001\000\002\001\001\000\006\024\004\025\271\001" +
    "\001\000\002\001\001\000\036\004\251\011\026\034\030" +
    "\035\025\041\015\042\007\044\022\045\043\047\044\050" +
    "\037\051\024\052\023\053\042\054\035\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\021\011\023\247\001" +
    "\001\000\002\001\001\000\036\004\237\011\026\034\030" +
    "\035\025\041\015\042\007\044\022\045\043\047\044\050" +
    "\037\051\024\052\023\053\042\054\035\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\020\016\022\227\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\012\223\015\031\016\014\020\016\021" +
    "\011\022\050\023\021\024\004\025\027\001\001\000\036" +
    "\004\216\011\026\034\030\035\025\041\015\042\007\044" +
    "\022\045\043\047\044\050\037\051\024\052\023\053\042" +
    "\054\035\001\001\000\002\001\001\000\036\004\165\011" +
    "\026\034\030\035\025\041\015\042\007\044\022\045\043" +
    "\047\044\050\037\051\024\052\023\053\042\054\035\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\004\144\011\026" +
    "\034\030\035\025\041\015\042\007\044\022\045\043\047" +
    "\044\050\037\051\024\052\023\053\042\054\035\001\001" +
    "\000\024\012\133\015\031\016\014\020\016\021\011\022" +
    "\050\023\021\024\004\025\027\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\004\102\011\026\034\030\035\025\041\015\042\007" +
    "\044\022\045\043\047\044\050\037\051\024\052\023\053" +
    "\042\054\035\001\001\000\036\004\101\011\026\034\030" +
    "\035\025\041\015\042\007\044\022\045\043\047\044\050" +
    "\037\051\024\052\023\053\042\054\035\001\001\000\036" +
    "\004\100\011\026\034\030\035\025\041\015\042\007\044" +
    "\022\045\043\047\044\050\037\051\024\052\023\053\042" +
    "\054\035\001\001\000\036\004\077\011\026\034\030\035" +
    "\025\041\015\042\007\044\022\045\043\047\044\050\037" +
    "\051\024\052\023\053\042\054\035\001\001\000\036\004" +
    "\076\011\026\034\030\035\025\041\015\042\007\044\022" +
    "\045\043\047\044\050\037\051\024\052\023\053\042\054" +
    "\035\001\001\000\036\004\075\011\026\034\030\035\025" +
    "\041\015\042\007\044\022\045\043\047\044\050\037\051" +
    "\024\052\023\053\042\054\035\001\001\000\036\004\074" +
    "\011\026\034\030\035\025\041\015\042\007\044\022\045" +
    "\043\047\044\050\037\051\024\052\023\053\042\054\035" +
    "\001\001\000\036\004\073\011\026\034\030\035\025\041" +
    "\015\042\007\044\022\045\043\047\044\050\037\051\024" +
    "\052\023\053\042\054\035\001\001\000\036\004\072\011" +
    "\026\034\030\035\025\041\015\042\007\044\022\045\043" +
    "\047\044\050\037\051\024\052\023\053\042\054\035\001" +
    "\001\000\036\004\071\011\026\034\030\035\025\041\015" +
    "\042\007\044\022\045\043\047\044\050\037\051\024\052" +
    "\023\053\042\054\035\001\001\000\036\004\070\011\026" +
    "\034\030\035\025\041\015\042\007\044\022\045\043\047" +
    "\044\050\037\051\024\052\023\053\042\054\035\001\001" +
    "\000\036\004\067\011\026\034\030\035\025\041\015\042" +
    "\007\044\022\045\043\047\044\050\037\051\024\052\023" +
    "\053\042\054\035\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\026\107\027\112\030" +
    "\113\001\001\000\036\004\106\011\026\034\030\035\025" +
    "\041\015\042\007\044\022\045\043\047\044\050\037\051" +
    "\024\052\023\053\042\054\035\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\031\121\032" +
    "\120\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\033\123\001\001\000\004" +
    "\031\124\001\001\000\002\001\001\000\004\033\125\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\004\132\011\026\034\030\035" +
    "\025\041\015\042\007\044\022\045\043\047\044\050\037" +
    "\051\024\052\023\053\042\054\035\001\001\000\002\001" +
    "\001\000\002\001\001\000\040\004\135\005\136\011\026" +
    "\034\030\035\025\041\015\042\007\044\022\045\043\047" +
    "\044\050\037\051\024\052\023\053\042\054\035\001\001" +
    "\000\004\006\140\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\004\142\011\026\034\030" +
    "\035\025\041\015\042\007\044\022\045\043\047\044\050" +
    "\037\051\024\052\023\053\042\054\035\001\001\000\004" +
    "\006\143\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\004\146\011\026\034\030\035\025\041\015\042\007" +
    "\044\022\045\043\047\044\050\037\051\024\052\023\053" +
    "\042\054\035\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\013\152\017\153\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\014\155\001\001\000\004\017\156" +
    "\001\001\000\002\001\001\000\004\014\157\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\026\164\027\112\030\113\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\036\206\037\205" +
    "\001\001\000\036\004\200\011\026\034\030\035\025\041" +
    "\015\042\007\044\022\045\043\047\044\050\037\051\024" +
    "\052\023\053\042\054\035\001\001\000\040\004\172\007" +
    "\171\011\026\034\030\035\025\041\015\042\007\044\022" +
    "\045\043\047\044\050\037\051\024\052\023\053\042\054" +
    "\035\001\001\000\002\001\001\000\004\010\173\001\001" +
    "\000\002\001\001\000\036\004\175\011\026\034\030\035" +
    "\025\041\015\042\007\044\022\045\043\047\044\050\037" +
    "\051\024\052\023\053\042\054\035\001\001\000\004\010" +
    "\176\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\004\203\011\026\034" +
    "\030\035\025\041\015\042\007\044\022\045\043\047\044" +
    "\050\037\051\024\052\023\053\042\054\035\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\040\210\001\001\000\004\036\211\001\001\000\002\001" +
    "\001\000\004\040\212\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\004\215\011\026\034\030\035\025\041" +
    "\015\042\007\044\022\045\043\047\044\050\037\051\024" +
    "\052\023\053\042\054\035\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\004\220\011\026\034\030\035\025" +
    "\041\015\042\007\044\022\045\043\047\044\050\037\051" +
    "\024\052\023\053\042\054\035\001\001\000\002\001\001" +
    "\000\036\004\222\011\026\034\030\035\025\041\015\042" +
    "\007\044\022\045\043\047\044\050\037\051\024\052\023" +
    "\053\042\054\035\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\026\226\027\112\030\113" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\004" +
    "\235\011\026\034\030\035\025\041\015\042\007\044\022" +
    "\045\043\047\044\050\037\051\024\052\023\053\042\054" +
    "\035\001\001\000\036\004\234\011\026\034\030\035\025" +
    "\041\015\042\007\044\022\045\043\047\044\050\037\051" +
    "\024\052\023\053\042\054\035\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\004\242\011\026\034\030\035\025\041\015\042\007\044" +
    "\022\045\043\047\044\050\037\051\024\052\023\053\042" +
    "\054\035\001\001\000\002\001\001\000\036\004\244\011" +
    "\026\034\030\035\025\041\015\042\007\044\022\045\043" +
    "\047\044\050\037\051\024\052\023\053\042\054\035\001" +
    "\001\000\002\001\001\000\036\004\246\011\026\034\030" +
    "\035\025\041\015\042\007\044\022\045\043\047\044\050" +
    "\037\051\024\052\023\053\042\054\035\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\046" +
    "\252\001\001\000\002\001\001\000\036\004\254\011\026" +
    "\034\030\035\025\041\015\042\007\044\022\045\043\047" +
    "\044\050\037\051\024\052\023\053\042\054\035\001\001" +
    "\000\004\046\255\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\013\261\017\153\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\004\270\011" +
    "\026\034\030\035\025\041\015\042\007\044\022\045\043" +
    "\047\044\050\037\051\024\052\023\053\042\054\035\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\004\267" +
    "\011\026\034\030\035\025\041\015\042\007\044\022\045" +
    "\043\047\044\050\037\051\024\052\023\053\042\054\035" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Grm$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Grm$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Grm$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lexer.nextToken(); 
    }

 
  public com.chaosopher.tigerlang.compiler.absyn.Exp parseResult;
  com.chaosopher.tigerlang.compiler.errormsg.ErrorMsg errorMsg;
  Lexer lexer;

  public void syntax_error(java_cup.runtime.Symbol current) {
      errorMsg.error(current.left, "CUP: Syntax error, unexpected '"  + Const.symnames[current.sym] + "'");
  }

  public void unrecovered_syntax_error(java_cup.runtime.Symbol current) {
      errorMsg.error(current != null ? current.left : 0, "CUP: Unrecovered syntax error, unexpected '"  + Const.symnames[current.sym] + "'");
  }

  public void report_error(String message, java_cup.runtime.Symbol info) {
      errorMsg.error(info.left, message);
  }

  public void report_fatal_error(String message, java_cup.runtime.Symbol info) {
      errorMsg.error(info.left, message);
  }

  public Grm(Lexer l, com.chaosopher.tigerlang.compiler.errormsg.ErrorMsg err) {
    this();
    errorMsg=err;
    lexer=l;
  }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Grm$actions {

 
  static com.chaosopher.tigerlang.compiler.symbol.Symbol sym(String s) {
	  return com.chaosopher.tigerlang.compiler.symbol.Symbol.symbol(s);
	}

  private final Grm parser;

  /** Constructor */
  CUP$Grm$actions(Grm parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Grm$do_action(
    int                        CUP$Grm$act_num,
    java_cup.runtime.lr_parser CUP$Grm$parser,
    java.util.Stack            CUP$Grm$stack,
    int                        CUP$Grm$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Grm$result;

      /* select the action based on the action number */
      switch (CUP$Grm$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // fieldCreate ::= ID EQ exp 
            {
              com.chaosopher.tigerlang.compiler.absyn.FieldExpList RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		com.chaosopher.tigerlang.compiler.absyn.Exp e = (com.chaosopher.tigerlang.compiler.absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new com.chaosopher.tigerlang.compiler.absyn.FieldExpList(ileft, com.chaosopher.tigerlang.compiler.symbol.Symbol.symbol(i), e, null); 
              CUP$Grm$result = new java_cup.runtime.Symbol(28/*fieldCreate*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // fieldCreateListAux ::= 
            {
              com.chaosopher.tigerlang.compiler.absyn.FieldExpList RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(30/*fieldCreateListAux*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // fieldCreateListAux ::= COMMA fieldCreate fieldCreateListAux 
            {
              com.chaosopher.tigerlang.compiler.absyn.FieldExpList RESULT = null;
		int fcleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int fcright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		com.chaosopher.tigerlang.compiler.absyn.FieldExpList fc = (com.chaosopher.tigerlang.compiler.absyn.FieldExpList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int fclaleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int fclaright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		com.chaosopher.tigerlang.compiler.absyn.FieldExpList fcla = (com.chaosopher.tigerlang.compiler.absyn.FieldExpList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new com.chaosopher.tigerlang.compiler.absyn.FieldExpList(fcleft, fc.name, fc.init, fcla); 
              CUP$Grm$result = new java_cup.runtime.Symbol(30/*fieldCreateListAux*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // fieldCreateList ::= 
            {
              com.chaosopher.tigerlang.compiler.absyn.FieldExpList RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(29/*fieldCreateList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // fieldCreateList ::= fieldCreate fieldCreateListAux 
            {
              com.chaosopher.tigerlang.compiler.absyn.FieldExpList RESULT = null;
		int fcleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int fcright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		com.chaosopher.tigerlang.compiler.absyn.FieldExpList fc = (com.chaosopher.tigerlang.compiler.absyn.FieldExpList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int fclaleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int fclaright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		com.chaosopher.tigerlang.compiler.absyn.FieldExpList fcla = (com.chaosopher.tigerlang.compiler.absyn.FieldExpList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new com.chaosopher.tigerlang.compiler.absyn.FieldExpList(fcleft, fc.name, fc.init, fcla); 
              CUP$Grm$result = new java_cup.runtime.Symbol(29/*fieldCreateList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // recCreate ::= ID LBRACE fieldCreateList RBRACE 
            {
              com.chaosopher.tigerlang.compiler.absyn.RecordExp RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int fclleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int fclright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		com.chaosopher.tigerlang.compiler.absyn.FieldExpList fcl = (com.chaosopher.tigerlang.compiler.absyn.FieldExpList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = new com.chaosopher.tigerlang.compiler.absyn.RecordExp(ileft, new com.chaosopher.tigerlang.compiler.absyn.NameTy(ileft, com.chaosopher.tigerlang.compiler.symbol.Symbol.symbol(i)), fcl); 
              CUP$Grm$result = new java_cup.runtime.Symbol(26/*recCreate*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // arrCreate ::= ID LBRACK exp RBRACK OF exp 
            {
              com.chaosopher.tigerlang.compiler.absyn.ArrayExp RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		com.chaosopher.tigerlang.compiler.absyn.Exp e1 = (com.chaosopher.tigerlang.compiler.absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		com.chaosopher.tigerlang.compiler.absyn.Exp e2 = (com.chaosopher.tigerlang.compiler.absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new com.chaosopher.tigerlang.compiler.absyn.ArrayExp(ileft, new com.chaosopher.tigerlang.compiler.absyn.NameTy(ileft, com.chaosopher.tigerlang.compiler.symbol.Symbol.symbol(i)), e1, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(32/*arrCreate*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // letExp ::= LET decList IN expList END 
            {
              com.chaosopher.tigerlang.compiler.absyn.Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		com.chaosopher.tigerlang.compiler.absyn.DecList e1 = (com.chaosopher.tigerlang.compiler.absyn.DecList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		com.chaosopher.tigerlang.compiler.absyn.ExpList e2 = (com.chaosopher.tigerlang.compiler.absyn.ExpList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = new com.chaosopher.tigerlang.compiler.absyn.LetExp(e1left, (com.chaosopher.tigerlang.compiler.absyn.DecList)e1, (com.chaosopher.tigerlang.compiler.absyn.Exp)new com.chaosopher.tigerlang.compiler.absyn.SeqExp(e1left, e2)); 
              CUP$Grm$result = new java_cup.runtime.Symbol(7/*letExp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // forExp ::= FOR ID ASSIGN exp TO exp DO exp 
            {
              com.chaosopher.tigerlang.compiler.absyn.ForExp RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-6)).value;
		int e0left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int e0right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		com.chaosopher.tigerlang.compiler.absyn.Exp e0 = (com.chaosopher.tigerlang.compiler.absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		com.chaosopher.tigerlang.compiler.absyn.Exp e1 = (com.chaosopher.tigerlang.compiler.absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		com.chaosopher.tigerlang.compiler.absyn.Exp e2 = (com.chaosopher.tigerlang.compiler.absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new com.chaosopher.tigerlang.compiler.absyn.ForExp(ileft, new com.chaosopher.tigerlang.compiler.absyn.VarDec(ileft, com.chaosopher.tigerlang.compiler.symbol.Symbol.symbol(i), null, e0), e1, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(41/*forExp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-7)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // whileExp ::= WHILE exp DO exp 
            {
              com.chaosopher.tigerlang.compiler.absyn.WhileExp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		com.chaosopher.tigerlang.compiler.absyn.Exp e1 = (com.chaosopher.tigerlang.compiler.absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		com.chaosopher.tigerlang.compiler.absyn.Exp e2 = (com.chaosopher.tigerlang.compiler.absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new com.chaosopher.tigerlang.compiler.absyn.WhileExp(e1left, (com.chaosopher.tigerlang.compiler.absyn.Exp)e1, (com.chaosopher.tigerlang.compiler.absyn.Exp)e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(40/*whileExp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ifThenElse ::= exp OR exp 
            {
              com.chaosopher.tigerlang.compiler.absyn.IfExp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		com.chaosopher.tigerlang.compiler.absyn.Exp e1 = (com.chaosopher.tigerlang.compiler.absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		com.chaosopher.tigerlang.compiler.absyn.Exp e2 = (com.chaosopher.tigerlang.compiler.absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new com.chaosopher.tigerlang.compiler.absyn.IfExp(e1left, e1, new com.chaosopher.tigerlang.compiler.absyn.IntExp(e1left, 1), e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(39/*ifThenElse*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ifThenElse ::= exp AND exp 
            {
              com.chaosopher.tigerlang.compiler.absyn.IfExp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		com.chaosopher.tigerlang.compiler.absyn.Exp e1 = (com.chaosopher.tigerlang.compiler.absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		com.chaosopher.tigerlang.compiler.absyn.Exp e2 = (com.chaosopher.tigerlang.compiler.absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new com.chaosopher.tigerlang.compiler.absyn.IfExp(e1left, e1, e2, new com.chaosopher.tigerlang.compiler.absyn.IntExp(e1left, 0)); 
              CUP$Grm$result = new java_cup.runtime.Symbol(39/*ifThenElse*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // ifThenElse ::= IF exp THEN exp ELSE exp 
            {
              com.chaosopher.tigerlang.compiler.absyn.IfExp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		com.chaosopher.tigerlang.compiler.absyn.Exp e1 = (com.chaosopher.tigerlang.compiler.absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		com.chaosopher.tigerlang.compiler.absyn.Exp e2 = (com.chaosopher.tigerlang.compiler.absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		com.chaosopher.tigerlang.compiler.absyn.Exp e3 = (com.chaosopher.tigerlang.compiler.absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new com.chaosopher.tigerlang.compiler.absyn.IfExp(e1left, e1, e2, e3); 
              CUP$Grm$result = new java_cup.runtime.Symbol(39/*ifThenElse*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ifThen ::= IF exp THEN exp 
            {
              com.chaosopher.tigerlang.compiler.absyn.IfExp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		com.chaosopher.tigerlang.compiler.absyn.Exp e1 = (com.chaosopher.tigerlang.compiler.absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		com.chaosopher.tigerlang.compiler.absyn.Exp e2 = (com.chaosopher.tigerlang.compiler.absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new com.chaosopher.tigerlang.compiler.absyn.IfExp(e1left, e1, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(38/*ifThen*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // assignment ::= lValue ASSIGN exp 
            {
              com.chaosopher.tigerlang.compiler.absyn.AssignExp RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		com.chaosopher.tigerlang.compiler.absyn.Var l = (com.chaosopher.tigerlang.compiler.absyn.Var)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		com.chaosopher.tigerlang.compiler.absyn.Exp e = (com.chaosopher.tigerlang.compiler.absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new com.chaosopher.tigerlang.compiler.absyn.AssignExp(lleft, l, e); 
              CUP$Grm$result = new java_cup.runtime.Symbol(27/*assignment*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expListAux ::= 
            {
              com.chaosopher.tigerlang.compiler.absyn.ExpList RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(4/*expListAux*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expListAux ::= SEMICOLON exp expListAux 
            {
              com.chaosopher.tigerlang.compiler.absyn.ExpList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		com.chaosopher.tigerlang.compiler.absyn.Exp e = (com.chaosopher.tigerlang.compiler.absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		com.chaosopher.tigerlang.compiler.absyn.ExpList a = (com.chaosopher.tigerlang.compiler.absyn.ExpList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new com.chaosopher.tigerlang.compiler.absyn.ExpList(e, a); 
              CUP$Grm$result = new java_cup.runtime.Symbol(4/*expListAux*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expList ::= 
            {
              com.chaosopher.tigerlang.compiler.absyn.ExpList RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(3/*expList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expList ::= exp expListAux 
            {
              com.chaosopher.tigerlang.compiler.absyn.ExpList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		com.chaosopher.tigerlang.compiler.absyn.Exp e = (com.chaosopher.tigerlang.compiler.absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		com.chaosopher.tigerlang.compiler.absyn.ExpList a = (com.chaosopher.tigerlang.compiler.absyn.ExpList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new com.chaosopher.tigerlang.compiler.absyn.ExpList(e, a); 
              CUP$Grm$result = new java_cup.runtime.Symbol(3/*expList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // paramListAux ::= 
            {
              com.chaosopher.tigerlang.compiler.absyn.ExpList RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(6/*paramListAux*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // paramListAux ::= COMMA exp paramListAux 
            {
              com.chaosopher.tigerlang.compiler.absyn.ExpList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		com.chaosopher.tigerlang.compiler.absyn.Exp e = (com.chaosopher.tigerlang.compiler.absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		com.chaosopher.tigerlang.compiler.absyn.ExpList a = (com.chaosopher.tigerlang.compiler.absyn.ExpList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new com.chaosopher.tigerlang.compiler.absyn.ExpList(e, a); 
              CUP$Grm$result = new java_cup.runtime.Symbol(6/*paramListAux*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // paramList ::= 
            {
              com.chaosopher.tigerlang.compiler.absyn.ExpList RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(5/*paramList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // paramList ::= exp paramListAux 
            {
              com.chaosopher.tigerlang.compiler.absyn.ExpList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		com.chaosopher.tigerlang.compiler.absyn.Exp e = (com.chaosopher.tigerlang.compiler.absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		com.chaosopher.tigerlang.compiler.absyn.ExpList a = (com.chaosopher.tigerlang.compiler.absyn.ExpList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new com.chaosopher.tigerlang.compiler.absyn.ExpList(e, a); 
              CUP$Grm$result = new java_cup.runtime.Symbol(5/*paramList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // callExp ::= ID LPAREN paramList RPAREN 
            {
              com.chaosopher.tigerlang.compiler.absyn.CallExp RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		com.chaosopher.tigerlang.compiler.absyn.ExpList el = (com.chaosopher.tigerlang.compiler.absyn.ExpList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = new com.chaosopher.tigerlang.compiler.absyn.CallExp(ileft, com.chaosopher.tigerlang.compiler.symbol.Symbol.symbol(i), el); 
              CUP$Grm$result = new java_cup.runtime.Symbol(37/*callExp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // seqExpAux ::= 
            {
              com.chaosopher.tigerlang.compiler.absyn.ExpList RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(36/*seqExpAux*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // seqExpAux ::= SEMICOLON exp seqExpAux 
            {
              com.chaosopher.tigerlang.compiler.absyn.ExpList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		com.chaosopher.tigerlang.compiler.absyn.Exp e = (com.chaosopher.tigerlang.compiler.absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int sealeft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int searight = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		com.chaosopher.tigerlang.compiler.absyn.ExpList sea = (com.chaosopher.tigerlang.compiler.absyn.ExpList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new com.chaosopher.tigerlang.compiler.absyn.ExpList(e, sea); 
              CUP$Grm$result = new java_cup.runtime.Symbol(36/*seqExpAux*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // seqExp ::= LPAREN exp seqExpAux RPAREN 
            {
              com.chaosopher.tigerlang.compiler.absyn.ExpList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		com.chaosopher.tigerlang.compiler.absyn.Exp e = (com.chaosopher.tigerlang.compiler.absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int sealeft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int searight = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		com.chaosopher.tigerlang.compiler.absyn.ExpList sea = (com.chaosopher.tigerlang.compiler.absyn.ExpList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = new com.chaosopher.tigerlang.compiler.absyn.ExpList(e, sea); 
              CUP$Grm$result = new java_cup.runtime.Symbol(35/*seqExp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // seqExp ::= LPAREN RPAREN 
            {
              com.chaosopher.tigerlang.compiler.absyn.ExpList RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(35/*seqExp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // infixExp ::= exp LE exp 
            {
              com.chaosopher.tigerlang.compiler.absyn.OpExp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		com.chaosopher.tigerlang.compiler.absyn.Exp e1 = (com.chaosopher.tigerlang.compiler.absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		com.chaosopher.tigerlang.compiler.absyn.Exp e2 = (com.chaosopher.tigerlang.compiler.absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new com.chaosopher.tigerlang.compiler.absyn.OpExp(e1left, e1, com.chaosopher.tigerlang.compiler.absyn.OpExp.LE, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(34/*infixExp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // infixExp ::= exp GE exp 
            {
              com.chaosopher.tigerlang.compiler.absyn.OpExp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		com.chaosopher.tigerlang.compiler.absyn.Exp e1 = (com.chaosopher.tigerlang.compiler.absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		com.chaosopher.tigerlang.compiler.absyn.Exp e2 = (com.chaosopher.tigerlang.compiler.absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new com.chaosopher.tigerlang.compiler.absyn.OpExp(e1left, e1, com.chaosopher.tigerlang.compiler.absyn.OpExp.GE, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(34/*infixExp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // infixExp ::= exp LT exp 
            {
              com.chaosopher.tigerlang.compiler.absyn.OpExp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		com.chaosopher.tigerlang.compiler.absyn.Exp e1 = (com.chaosopher.tigerlang.compiler.absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		com.chaosopher.tigerlang.compiler.absyn.Exp e2 = (com.chaosopher.tigerlang.compiler.absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new com.chaosopher.tigerlang.compiler.absyn.OpExp(e1left, e1, com.chaosopher.tigerlang.compiler.absyn.OpExp.LT, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(34/*infixExp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // infixExp ::= exp GT exp 
            {
              com.chaosopher.tigerlang.compiler.absyn.OpExp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		com.chaosopher.tigerlang.compiler.absyn.Exp e1 = (com.chaosopher.tigerlang.compiler.absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		com.chaosopher.tigerlang.compiler.absyn.Exp e2 = (com.chaosopher.tigerlang.compiler.absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new com.chaosopher.tigerlang.compiler.absyn.OpExp(e1left, e1, com.chaosopher.tigerlang.compiler.absyn.OpExp.GT, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(34/*infixExp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // infixExp ::= exp NEQ exp 
            {
              com.chaosopher.tigerlang.compiler.absyn.OpExp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		com.chaosopher.tigerlang.compiler.absyn.Exp e1 = (com.chaosopher.tigerlang.compiler.absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		com.chaosopher.tigerlang.compiler.absyn.Exp e2 = (com.chaosopher.tigerlang.compiler.absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new com.chaosopher.tigerlang.compiler.absyn.OpExp(e1left, e1, com.chaosopher.tigerlang.compiler.absyn.OpExp.NE, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(34/*infixExp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // infixExp ::= exp EQ exp 
            {
              com.chaosopher.tigerlang.compiler.absyn.OpExp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		com.chaosopher.tigerlang.compiler.absyn.Exp e1 = (com.chaosopher.tigerlang.compiler.absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		com.chaosopher.tigerlang.compiler.absyn.Exp e2 = (com.chaosopher.tigerlang.compiler.absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new com.chaosopher.tigerlang.compiler.absyn.OpExp(e1left, e1, com.chaosopher.tigerlang.compiler.absyn.OpExp.EQ, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(34/*infixExp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // infixExp ::= exp DIVIDE exp 
            {
              com.chaosopher.tigerlang.compiler.absyn.OpExp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		com.chaosopher.tigerlang.compiler.absyn.Exp e1 = (com.chaosopher.tigerlang.compiler.absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		com.chaosopher.tigerlang.compiler.absyn.Exp e2 = (com.chaosopher.tigerlang.compiler.absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new com.chaosopher.tigerlang.compiler.absyn.OpExp(e1left, e1, com.chaosopher.tigerlang.compiler.absyn.OpExp.DIV, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(34/*infixExp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // infixExp ::= exp TIMES exp 
            {
              com.chaosopher.tigerlang.compiler.absyn.OpExp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		com.chaosopher.tigerlang.compiler.absyn.Exp e1 = (com.chaosopher.tigerlang.compiler.absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		com.chaosopher.tigerlang.compiler.absyn.Exp e2 = (com.chaosopher.tigerlang.compiler.absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new com.chaosopher.tigerlang.compiler.absyn.OpExp(e1left, e1, com.chaosopher.tigerlang.compiler.absyn.OpExp.MUL, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(34/*infixExp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // infixExp ::= exp MINUS exp 
            {
              com.chaosopher.tigerlang.compiler.absyn.OpExp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		com.chaosopher.tigerlang.compiler.absyn.Exp e1 = (com.chaosopher.tigerlang.compiler.absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		com.chaosopher.tigerlang.compiler.absyn.Exp e2 = (com.chaosopher.tigerlang.compiler.absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new com.chaosopher.tigerlang.compiler.absyn.OpExp(e1left, e1, com.chaosopher.tigerlang.compiler.absyn.OpExp.MINUS, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(34/*infixExp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // infixExp ::= exp PLUS exp 
            {
              com.chaosopher.tigerlang.compiler.absyn.OpExp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		com.chaosopher.tigerlang.compiler.absyn.Exp e1 = (com.chaosopher.tigerlang.compiler.absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		com.chaosopher.tigerlang.compiler.absyn.Exp e2 = (com.chaosopher.tigerlang.compiler.absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new com.chaosopher.tigerlang.compiler.absyn.OpExp(e1left, e1, com.chaosopher.tigerlang.compiler.absyn.OpExp.PLUS, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(34/*infixExp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // negation ::= MINUS exp 
            {
              com.chaosopher.tigerlang.compiler.absyn.Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		com.chaosopher.tigerlang.compiler.absyn.Exp e1 = (com.chaosopher.tigerlang.compiler.absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new com.chaosopher.tigerlang.compiler.absyn.OpExp(e1left, new com.chaosopher.tigerlang.compiler.absyn.IntExp(e1left,0), com.chaosopher.tigerlang.compiler.absyn.OpExp.MINUS, e1); 
              CUP$Grm$result = new java_cup.runtime.Symbol(42/*negation*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // exp ::= error exp 
            {
              com.chaosopher.tigerlang.compiler.absyn.Exp RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // exp ::= letExp 
            {
              com.chaosopher.tigerlang.compiler.absyn.Exp RESULT = null;
		int leleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int leright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		com.chaosopher.tigerlang.compiler.absyn.Exp le = (com.chaosopher.tigerlang.compiler.absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = le; 
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // exp ::= BREAK 
            {
              com.chaosopher.tigerlang.compiler.absyn.Exp RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new com.chaosopher.tigerlang.compiler.absyn.BreakExp(bleft); 
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // exp ::= forExp 
            {
              com.chaosopher.tigerlang.compiler.absyn.Exp RESULT = null;
		int feleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int feright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		com.chaosopher.tigerlang.compiler.absyn.ForExp fe = (com.chaosopher.tigerlang.compiler.absyn.ForExp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = fe; 
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // exp ::= whileExp 
            {
              com.chaosopher.tigerlang.compiler.absyn.Exp RESULT = null;
		int weleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int weright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		com.chaosopher.tigerlang.compiler.absyn.WhileExp we = (com.chaosopher.tigerlang.compiler.absyn.WhileExp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = we; 
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // exp ::= ifThen 
            {
              com.chaosopher.tigerlang.compiler.absyn.Exp RESULT = null;
		int itleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int itright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		com.chaosopher.tigerlang.compiler.absyn.IfExp it = (com.chaosopher.tigerlang.compiler.absyn.IfExp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = it; 
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // exp ::= ifThenElse 
            {
              com.chaosopher.tigerlang.compiler.absyn.Exp RESULT = null;
		int iteleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int iteright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		com.chaosopher.tigerlang.compiler.absyn.IfExp ite = (com.chaosopher.tigerlang.compiler.absyn.IfExp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = ite; 
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // exp ::= negation 
            {
              com.chaosopher.tigerlang.compiler.absyn.Exp RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		com.chaosopher.tigerlang.compiler.absyn.Exp n = (com.chaosopher.tigerlang.compiler.absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = n; 
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // exp ::= assignment 
            {
              com.chaosopher.tigerlang.compiler.absyn.Exp RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		com.chaosopher.tigerlang.compiler.absyn.AssignExp a = (com.chaosopher.tigerlang.compiler.absyn.AssignExp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = a; 
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // exp ::= recCreate 
            {
              com.chaosopher.tigerlang.compiler.absyn.Exp RESULT = null;
		int rcleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int rcright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		com.chaosopher.tigerlang.compiler.absyn.RecordExp rc = (com.chaosopher.tigerlang.compiler.absyn.RecordExp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = rc; 
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // exp ::= arrCreate 
            {
              com.chaosopher.tigerlang.compiler.absyn.Exp RESULT = null;
		int acleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int acright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		com.chaosopher.tigerlang.compiler.absyn.ArrayExp ac = (com.chaosopher.tigerlang.compiler.absyn.ArrayExp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = ac; 
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // exp ::= infixExp 
            {
              com.chaosopher.tigerlang.compiler.absyn.Exp RESULT = null;
		int ieleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int ieright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		com.chaosopher.tigerlang.compiler.absyn.OpExp ie = (com.chaosopher.tigerlang.compiler.absyn.OpExp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = ie; 
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // exp ::= callExp 
            {
              com.chaosopher.tigerlang.compiler.absyn.Exp RESULT = null;
		int celeft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int ceright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		com.chaosopher.tigerlang.compiler.absyn.CallExp ce = (com.chaosopher.tigerlang.compiler.absyn.CallExp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = ce; 
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // exp ::= seqExp 
            {
              com.chaosopher.tigerlang.compiler.absyn.Exp RESULT = null;
		int seleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int seright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		com.chaosopher.tigerlang.compiler.absyn.ExpList se = (com.chaosopher.tigerlang.compiler.absyn.ExpList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new com.chaosopher.tigerlang.compiler.absyn.SeqExp(seleft, se); 
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // exp ::= STRING 
            {
              com.chaosopher.tigerlang.compiler.absyn.Exp RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new com.chaosopher.tigerlang.compiler.absyn.StringExp(sleft, s); 
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // exp ::= INT 
            {
              com.chaosopher.tigerlang.compiler.absyn.Exp RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new com.chaosopher.tigerlang.compiler.absyn.IntExp(ileft, i); 
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // exp ::= NIL 
            {
              com.chaosopher.tigerlang.compiler.absyn.Exp RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new com.chaosopher.tigerlang.compiler.absyn.NilExp(nleft); 
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // exp ::= lValue 
            {
              com.chaosopher.tigerlang.compiler.absyn.Exp RESULT = null;
		int lvleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		com.chaosopher.tigerlang.compiler.absyn.Var lv = (com.chaosopher.tigerlang.compiler.absyn.Var)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new com.chaosopher.tigerlang.compiler.absyn.VarExp(lvleft, lv); 
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // lValue ::= ID LBRACK exp RBRACK 
            {
              com.chaosopher.tigerlang.compiler.absyn.Var RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		com.chaosopher.tigerlang.compiler.absyn.Exp e = (com.chaosopher.tigerlang.compiler.absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = new com.chaosopher.tigerlang.compiler.absyn.SubscriptVar(ileft, new com.chaosopher.tigerlang.compiler.absyn.SimpleVar(ileft, com.chaosopher.tigerlang.compiler.symbol.Symbol.symbol(i)), e); 
              CUP$Grm$result = new java_cup.runtime.Symbol(31/*lValue*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // lValue ::= lValue LBRACK exp RBRACK 
            {
              com.chaosopher.tigerlang.compiler.absyn.Var RESULT = null;
		int lvleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		com.chaosopher.tigerlang.compiler.absyn.Var lv = (com.chaosopher.tigerlang.compiler.absyn.Var)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		com.chaosopher.tigerlang.compiler.absyn.Exp e = (com.chaosopher.tigerlang.compiler.absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = new com.chaosopher.tigerlang.compiler.absyn.SubscriptVar(lvleft, lv, e); 
              CUP$Grm$result = new java_cup.runtime.Symbol(31/*lValue*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // lValue ::= lValue DOT ID 
            {
              com.chaosopher.tigerlang.compiler.absyn.Var RESULT = null;
		int lvleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		com.chaosopher.tigerlang.compiler.absyn.Var lv = (com.chaosopher.tigerlang.compiler.absyn.Var)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new com.chaosopher.tigerlang.compiler.absyn.FieldVar(lvleft, lv, com.chaosopher.tigerlang.compiler.symbol.Symbol.symbol(i)); 
              CUP$Grm$result = new java_cup.runtime.Symbol(31/*lValue*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // lValue ::= ID 
            {
              com.chaosopher.tigerlang.compiler.absyn.Var RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new com.chaosopher.tigerlang.compiler.absyn.SimpleVar(idleft, com.chaosopher.tigerlang.compiler.symbol.Symbol.symbol(id)); 
              CUP$Grm$result = new java_cup.runtime.Symbol(31/*lValue*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // varDec ::= VAR ID COLON ty ASSIGN exp 
            {
              com.chaosopher.tigerlang.compiler.absyn.VarDec RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		com.chaosopher.tigerlang.compiler.absyn.Ty t = (com.chaosopher.tigerlang.compiler.absyn.Ty)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		com.chaosopher.tigerlang.compiler.absyn.Exp e = (com.chaosopher.tigerlang.compiler.absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new com.chaosopher.tigerlang.compiler.absyn.VarDec(ileft, com.chaosopher.tigerlang.compiler.symbol.Symbol.symbol(i), (com.chaosopher.tigerlang.compiler.absyn.NameTy)t, e); 
              CUP$Grm$result = new java_cup.runtime.Symbol(12/*varDec*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // varDec ::= VAR ID ASSIGN exp 
            {
              com.chaosopher.tigerlang.compiler.absyn.VarDec RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		com.chaosopher.tigerlang.compiler.absyn.Exp e = (com.chaosopher.tigerlang.compiler.absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new com.chaosopher.tigerlang.compiler.absyn.VarDec(ileft, com.chaosopher.tigerlang.compiler.symbol.Symbol.symbol(i), null, e); 
              CUP$Grm$result = new java_cup.runtime.Symbol(12/*varDec*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // primDec ::= PRIMITIVE ID LPAREN formalVarDecList RPAREN COLON ID 
            {
              com.chaosopher.tigerlang.compiler.absyn.FunctionDec RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-5)).value;
		int fdlleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int fdlright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		com.chaosopher.tigerlang.compiler.absyn.DecList fdl = (com.chaosopher.tigerlang.compiler.absyn.DecList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int tyleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		String ty = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new com.chaosopher.tigerlang.compiler.absyn.FunctionDec(ileft, com.chaosopher.tigerlang.compiler.symbol.Symbol.symbol(i), fdl, new com.chaosopher.tigerlang.compiler.absyn.NameTy(ileft, com.chaosopher.tigerlang.compiler.symbol.Symbol.symbol(ty)), null /* no body */, null ); 
              CUP$Grm$result = new java_cup.runtime.Symbol(15/*primDec*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // primDec ::= PRIMITIVE ID LPAREN formalVarDecList RPAREN 
            {
              com.chaosopher.tigerlang.compiler.absyn.FunctionDec RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int fdlleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int fdlright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		com.chaosopher.tigerlang.compiler.absyn.DecList fdl = (com.chaosopher.tigerlang.compiler.absyn.DecList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = new com.chaosopher.tigerlang.compiler.absyn.FunctionDec(ileft, com.chaosopher.tigerlang.compiler.symbol.Symbol.symbol(i), fdl, null, null /* no body */, null ); 
              CUP$Grm$result = new java_cup.runtime.Symbol(15/*primDec*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // funcDec ::= FUNCTION ID LPAREN formalVarDecList RPAREN COLON ID EQ exp 
            {
              com.chaosopher.tigerlang.compiler.absyn.FunctionDec RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-7)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-7)).value;
		int fdlleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left;
		int fdlright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).right;
		com.chaosopher.tigerlang.compiler.absyn.DecList fdl = (com.chaosopher.tigerlang.compiler.absyn.DecList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-5)).value;
		int tyleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		String ty = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		com.chaosopher.tigerlang.compiler.absyn.Exp e1 = (com.chaosopher.tigerlang.compiler.absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new com.chaosopher.tigerlang.compiler.absyn.FunctionDec(ileft, com.chaosopher.tigerlang.compiler.symbol.Symbol.symbol(i), fdl, new com.chaosopher.tigerlang.compiler.absyn.NameTy(ileft, com.chaosopher.tigerlang.compiler.symbol.Symbol.symbol(ty)), e1, null ); 
              CUP$Grm$result = new java_cup.runtime.Symbol(14/*funcDec*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-8)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // funcDec ::= FUNCTION ID LPAREN formalVarDecList RPAREN EQ exp 
            {
              com.chaosopher.tigerlang.compiler.absyn.FunctionDec RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-5)).value;
		int fdlleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int fdlright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		com.chaosopher.tigerlang.compiler.absyn.DecList fdl = (com.chaosopher.tigerlang.compiler.absyn.DecList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		com.chaosopher.tigerlang.compiler.absyn.Exp e1 = (com.chaosopher.tigerlang.compiler.absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new com.chaosopher.tigerlang.compiler.absyn.FunctionDec(ileft, com.chaosopher.tigerlang.compiler.symbol.Symbol.symbol(i), fdl, null, e1, null ); 
              CUP$Grm$result = new java_cup.runtime.Symbol(14/*funcDec*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // formalVarDecListAux ::= 
            {
              com.chaosopher.tigerlang.compiler.absyn.DecList RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(10/*formalVarDecListAux*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // formalVarDecListAux ::= COMMA formalVarDec formalVarDecListAux 
            {
              com.chaosopher.tigerlang.compiler.absyn.DecList RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		com.chaosopher.tigerlang.compiler.absyn.VarDec d = (com.chaosopher.tigerlang.compiler.absyn.VarDec)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int dlleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		com.chaosopher.tigerlang.compiler.absyn.DecList dl = (com.chaosopher.tigerlang.compiler.absyn.DecList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new com.chaosopher.tigerlang.compiler.absyn.DecList(d, dl); 
              CUP$Grm$result = new java_cup.runtime.Symbol(10/*formalVarDecListAux*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // formalVarDecList ::= 
            {
              com.chaosopher.tigerlang.compiler.absyn.DecList RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(9/*formalVarDecList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // formalVarDecList ::= formalVarDec formalVarDecListAux 
            {
              com.chaosopher.tigerlang.compiler.absyn.DecList RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		com.chaosopher.tigerlang.compiler.absyn.VarDec d = (com.chaosopher.tigerlang.compiler.absyn.VarDec)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int dlleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		com.chaosopher.tigerlang.compiler.absyn.DecList dl = (com.chaosopher.tigerlang.compiler.absyn.DecList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new com.chaosopher.tigerlang.compiler.absyn.DecList(d, dl); 
              CUP$Grm$result = new java_cup.runtime.Symbol(9/*formalVarDecList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // formalVarDec ::= ID COLON ty 
            {
              com.chaosopher.tigerlang.compiler.absyn.VarDec RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		com.chaosopher.tigerlang.compiler.absyn.Ty t = (com.chaosopher.tigerlang.compiler.absyn.Ty)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new com.chaosopher.tigerlang.compiler.absyn.VarDec(ileft, com.chaosopher.tigerlang.compiler.symbol.Symbol.symbol(i), (com.chaosopher.tigerlang.compiler.absyn.NameTy)t, null); 
              CUP$Grm$result = new java_cup.runtime.Symbol(13/*formalVarDec*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // recTy ::= LBRACE fieldDecList RBRACE 
            {
              com.chaosopher.tigerlang.compiler.absyn.RecordTy RESULT = null;
		int flleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		com.chaosopher.tigerlang.compiler.absyn.FieldList fl = (com.chaosopher.tigerlang.compiler.absyn.FieldList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		  RESULT = new com.chaosopher.tigerlang.compiler.absyn.RecordTy(flleft, fl); 
              CUP$Grm$result = new java_cup.runtime.Symbol(22/*recTy*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // fieldDec ::= ID COLON ID 
            {
              com.chaosopher.tigerlang.compiler.absyn.FieldList RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int tyleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		String ty = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new com.chaosopher.tigerlang.compiler.absyn.FieldList(ileft, com.chaosopher.tigerlang.compiler.symbol.Symbol.symbol(i), new com.chaosopher.tigerlang.compiler.absyn.NameTy(tyleft, com.chaosopher.tigerlang.compiler.symbol.Symbol.symbol(ty)), null); 
              CUP$Grm$result = new java_cup.runtime.Symbol(23/*fieldDec*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // fieldDecListAux ::= 
            {
              com.chaosopher.tigerlang.compiler.absyn.FieldList RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(25/*fieldDecListAux*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // fieldDecListAux ::= COMMA fieldDec fieldDecListAux 
            {
              com.chaosopher.tigerlang.compiler.absyn.FieldList RESULT = null;
		int fdleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		com.chaosopher.tigerlang.compiler.absyn.FieldList fd = (com.chaosopher.tigerlang.compiler.absyn.FieldList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int fdlaleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int fdlaright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		com.chaosopher.tigerlang.compiler.absyn.FieldList fdla = (com.chaosopher.tigerlang.compiler.absyn.FieldList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new com.chaosopher.tigerlang.compiler.absyn.FieldList(fdleft, fd.name, fd.typ, fdla); 
              CUP$Grm$result = new java_cup.runtime.Symbol(25/*fieldDecListAux*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // fieldDecList ::= 
            {
              com.chaosopher.tigerlang.compiler.absyn.FieldList RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(24/*fieldDecList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // fieldDecList ::= fieldDec fieldDecListAux 
            {
              com.chaosopher.tigerlang.compiler.absyn.FieldList RESULT = null;
		int fdleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		com.chaosopher.tigerlang.compiler.absyn.FieldList fd = (com.chaosopher.tigerlang.compiler.absyn.FieldList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int fdlaleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int fdlaright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		com.chaosopher.tigerlang.compiler.absyn.FieldList fdla = (com.chaosopher.tigerlang.compiler.absyn.FieldList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new com.chaosopher.tigerlang.compiler.absyn.FieldList(fdleft, fd.name, fd.typ, fdla); 
              CUP$Grm$result = new java_cup.runtime.Symbol(24/*fieldDecList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // arrTy ::= ARRAY OF ID 
            {
              com.chaosopher.tigerlang.compiler.absyn.ArrayTy RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new com.chaosopher.tigerlang.compiler.absyn.ArrayTy(ileft, new com.chaosopher.tigerlang.compiler.absyn.NameTy(ileft, com.chaosopher.tigerlang.compiler.symbol.Symbol.symbol(i))); 
              CUP$Grm$result = new java_cup.runtime.Symbol(21/*arrTy*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ty ::= arrTy 
            {
              com.chaosopher.tigerlang.compiler.absyn.Ty RESULT = null;
		int arleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int arright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		com.chaosopher.tigerlang.compiler.absyn.ArrayTy ar = (com.chaosopher.tigerlang.compiler.absyn.ArrayTy)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = ar; 
              CUP$Grm$result = new java_cup.runtime.Symbol(20/*ty*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ty ::= recTy 
            {
              com.chaosopher.tigerlang.compiler.absyn.Ty RESULT = null;
		int rtleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int rtright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		com.chaosopher.tigerlang.compiler.absyn.RecordTy rt = (com.chaosopher.tigerlang.compiler.absyn.RecordTy)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = rt; 
              CUP$Grm$result = new java_cup.runtime.Symbol(20/*ty*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ty ::= ID 
            {
              com.chaosopher.tigerlang.compiler.absyn.Ty RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new com.chaosopher.tigerlang.compiler.absyn.NameTy(ileft, com.chaosopher.tigerlang.compiler.symbol.Symbol.symbol(i)); 
              CUP$Grm$result = new java_cup.runtime.Symbol(20/*ty*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // tyDec ::= TYPE ID EQ ty 
            {
              com.chaosopher.tigerlang.compiler.absyn.TypeDec RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		com.chaosopher.tigerlang.compiler.absyn.Ty t = (com.chaosopher.tigerlang.compiler.absyn.Ty)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new com.chaosopher.tigerlang.compiler.absyn.TypeDec(ileft, com.chaosopher.tigerlang.compiler.symbol.Symbol.symbol(i), t, null); 
              CUP$Grm$result = new java_cup.runtime.Symbol(18/*tyDec*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // decList ::= 
            {
              com.chaosopher.tigerlang.compiler.absyn.DecList RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(8/*decList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // decList ::= dec decList 
            {
              com.chaosopher.tigerlang.compiler.absyn.DecList RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		com.chaosopher.tigerlang.compiler.absyn.Dec d = (com.chaosopher.tigerlang.compiler.absyn.Dec)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int dlleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		com.chaosopher.tigerlang.compiler.absyn.DecList dl = (com.chaosopher.tigerlang.compiler.absyn.DecList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new com.chaosopher.tigerlang.compiler.absyn.DecList(d, dl); 
              CUP$Grm$result = new java_cup.runtime.Symbol(8/*decList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // dec ::= primDecList 
            {
              com.chaosopher.tigerlang.compiler.absyn.Dec RESULT = null;
		int fdleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		com.chaosopher.tigerlang.compiler.absyn.FunctionDec fd = (com.chaosopher.tigerlang.compiler.absyn.FunctionDec)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = fd; 
              CUP$Grm$result = new java_cup.runtime.Symbol(11/*dec*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // dec ::= funcDecList 
            {
              com.chaosopher.tigerlang.compiler.absyn.Dec RESULT = null;
		int fdleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		com.chaosopher.tigerlang.compiler.absyn.FunctionDec fd = (com.chaosopher.tigerlang.compiler.absyn.FunctionDec)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = fd; 
              CUP$Grm$result = new java_cup.runtime.Symbol(11/*dec*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // dec ::= varDec 
            {
              com.chaosopher.tigerlang.compiler.absyn.Dec RESULT = null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		com.chaosopher.tigerlang.compiler.absyn.VarDec vd = (com.chaosopher.tigerlang.compiler.absyn.VarDec)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = vd; 
              CUP$Grm$result = new java_cup.runtime.Symbol(11/*dec*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // dec ::= tyDecList 
            {
              com.chaosopher.tigerlang.compiler.absyn.Dec RESULT = null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		com.chaosopher.tigerlang.compiler.absyn.TypeDec td = (com.chaosopher.tigerlang.compiler.absyn.TypeDec)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = td; 
              CUP$Grm$result = new java_cup.runtime.Symbol(11/*dec*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // primDecList ::= primDec primDecList 
            {
              com.chaosopher.tigerlang.compiler.absyn.FunctionDec RESULT = null;
		int hleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		com.chaosopher.tigerlang.compiler.absyn.FunctionDec h = (com.chaosopher.tigerlang.compiler.absyn.FunctionDec)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		com.chaosopher.tigerlang.compiler.absyn.FunctionDec t = (com.chaosopher.tigerlang.compiler.absyn.FunctionDec)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new com.chaosopher.tigerlang.compiler.absyn.FunctionDec(h.pos, h.name, h.params, h.result, null, t); 
              CUP$Grm$result = new java_cup.runtime.Symbol(17/*primDecList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // primDecList ::= primDec 
            {
              com.chaosopher.tigerlang.compiler.absyn.FunctionDec RESULT = null;
		int hleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		com.chaosopher.tigerlang.compiler.absyn.FunctionDec h = (com.chaosopher.tigerlang.compiler.absyn.FunctionDec)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new com.chaosopher.tigerlang.compiler.absyn.FunctionDec(h.pos, h.name, h.params, h.result, null, null); 
              CUP$Grm$result = new java_cup.runtime.Symbol(17/*primDecList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // funcDecList ::= funcDec funcDecList 
            {
              com.chaosopher.tigerlang.compiler.absyn.FunctionDec RESULT = null;
		int hleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		com.chaosopher.tigerlang.compiler.absyn.FunctionDec h = (com.chaosopher.tigerlang.compiler.absyn.FunctionDec)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		com.chaosopher.tigerlang.compiler.absyn.FunctionDec t = (com.chaosopher.tigerlang.compiler.absyn.FunctionDec)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new com.chaosopher.tigerlang.compiler.absyn.FunctionDec(h.pos, h.name, h.params, h.result, h.body, t); 
              CUP$Grm$result = new java_cup.runtime.Symbol(16/*funcDecList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // funcDecList ::= funcDec 
            {
              com.chaosopher.tigerlang.compiler.absyn.FunctionDec RESULT = null;
		int hleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		com.chaosopher.tigerlang.compiler.absyn.FunctionDec h = (com.chaosopher.tigerlang.compiler.absyn.FunctionDec)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new com.chaosopher.tigerlang.compiler.absyn.FunctionDec(h.pos, h.name, h.params, h.result, h.body, null); 
              CUP$Grm$result = new java_cup.runtime.Symbol(16/*funcDecList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // tyDecList ::= tyDec tyDecList 
            {
              com.chaosopher.tigerlang.compiler.absyn.TypeDec RESULT = null;
		int hleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		com.chaosopher.tigerlang.compiler.absyn.TypeDec h = (com.chaosopher.tigerlang.compiler.absyn.TypeDec)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		com.chaosopher.tigerlang.compiler.absyn.TypeDec t = (com.chaosopher.tigerlang.compiler.absyn.TypeDec)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new com.chaosopher.tigerlang.compiler.absyn.TypeDec(h.pos, h.name, h.ty, t);  
              CUP$Grm$result = new java_cup.runtime.Symbol(19/*tyDecList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // tyDecList ::= tyDec 
            {
              com.chaosopher.tigerlang.compiler.absyn.TypeDec RESULT = null;
		int hleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		com.chaosopher.tigerlang.compiler.absyn.TypeDec h = (com.chaosopher.tigerlang.compiler.absyn.TypeDec)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new com.chaosopher.tigerlang.compiler.absyn.TypeDec(h.pos, h.name, h.ty, null); 
              CUP$Grm$result = new java_cup.runtime.Symbol(19/*tyDecList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= decList 
            {
              com.chaosopher.tigerlang.compiler.absyn.Absyn RESULT = null;
		int dlleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		com.chaosopher.tigerlang.compiler.absyn.DecList dl = (com.chaosopher.tigerlang.compiler.absyn.DecList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = dl; 
              CUP$Grm$result = new java_cup.runtime.Symbol(1/*program*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= exp 
            {
              com.chaosopher.tigerlang.compiler.absyn.Absyn RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		com.chaosopher.tigerlang.compiler.absyn.Exp e = (com.chaosopher.tigerlang.compiler.absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = e; 
              CUP$Grm$result = new java_cup.runtime.Symbol(1/*program*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		com.chaosopher.tigerlang.compiler.absyn.Absyn start_val = (com.chaosopher.tigerlang.compiler.absyn.Absyn)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		RESULT = start_val;
              CUP$Grm$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$Grm$parser.done_parsing();
          return CUP$Grm$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

