package com.chaosopher.tigerlang.compiler.parse;

action code {: 
  static com.chaosopher.tigerlang.compiler.symbol.Symbol sym(String s) {
	  return com.chaosopher.tigerlang.compiler.symbol.Symbol.symbol(s);
	}
:};

parser code  {: 
  public com.chaosopher.tigerlang.compiler.absyn.Exp parseResult;
  com.chaosopher.tigerlang.compiler.errormsg.ErrorMsg errorMsg;
  Lexer lexer;

  public void syntax_error(java_cup.runtime.Symbol current) {
      errorMsg.error(current.left, "CUP: Syntax error, unexpected '"  + Const.symnames[current.sym] + "'");
  }

  public void unrecovered_syntax_error(java_cup.runtime.Symbol current) {
      errorMsg.error(current != null ? current.left : 0, "CUP: Unrecovered syntax error, unexpected '"  + Const.symnames[current.sym] + "'");
  }

  public void report_error(String message, java_cup.runtime.Symbol info) {
      errorMsg.error(info.left, message);
  }

  public void report_fatal_error(String message, java_cup.runtime.Symbol info) {
      errorMsg.error(info.left, message);
  }

  public Grm(Lexer l, com.chaosopher.tigerlang.compiler.errormsg.ErrorMsg err) {
    this();
    errorMsg=err;
    lexer=l;
  }
:};

scan with {: return lexer.nextToken(); :};

terminal String ID, STRING;
terminal Integer INT;
terminal COMMA, COLON, SEMICOLON, LPAREN, RPAREN, 
	LBRACK, RBRACK, LBRACE, RBRACE, DOT, PLUS, MINUS, 
	TIMES, DIVIDE, EQ, NEQ, LT, LE, GT, GE, AND, OR, 
	ASSIGN, ARRAY, IF, THEN, ELSE, WHILE, FOR, TO, DO, 
	LET, IN, END, OF, BREAK, NIL, FUNCTION, VAR, TYPE, PRIMITIVE;

non terminal com.chaosopher.tigerlang.compiler.absyn.Absyn program;
non terminal com.chaosopher.tigerlang.compiler.absyn.Exp exp;
non terminal com.chaosopher.tigerlang.compiler.absyn.ExpList expList;
non terminal com.chaosopher.tigerlang.compiler.absyn.ExpList expListAux, paramList, paramListAux;
non terminal com.chaosopher.tigerlang.compiler.absyn.Exp letExp;
non terminal com.chaosopher.tigerlang.compiler.absyn.DecList decList, formalVarDecList, formalVarDecListAux;
non terminal com.chaosopher.tigerlang.compiler.absyn.Dec dec;
non terminal com.chaosopher.tigerlang.compiler.absyn.VarDec varDec, formalVarDec;
non terminal com.chaosopher.tigerlang.compiler.absyn.FunctionDec funcDec, primDec, funcDecList, primDecList; 
non terminal com.chaosopher.tigerlang.compiler.absyn.TypeDec tyDec, tyDecList;
non terminal com.chaosopher.tigerlang.compiler.absyn.Ty ty;
non terminal com.chaosopher.tigerlang.compiler.absyn.ArrayTy arrTy;
non terminal com.chaosopher.tigerlang.compiler.absyn.RecordTy recTy;
non terminal com.chaosopher.tigerlang.compiler.absyn.FieldList fieldDec, fieldDecList, fieldDecListAux;
non terminal com.chaosopher.tigerlang.compiler.absyn.RecordExp recCreate;
non terminal com.chaosopher.tigerlang.compiler.absyn.AssignExp assignment;
non terminal com.chaosopher.tigerlang.compiler.absyn.FieldExpList fieldCreate;
non terminal com.chaosopher.tigerlang.compiler.absyn.FieldExpList fieldCreateList;
non terminal com.chaosopher.tigerlang.compiler.absyn.FieldExpList fieldCreateListAux;
non terminal com.chaosopher.tigerlang.compiler.absyn.Var lValue;
non terminal com.chaosopher.tigerlang.compiler.absyn.ArrayExp arrCreate;
non terminal com.chaosopher.tigerlang.compiler.absyn.FieldVar fieldExp;
non terminal com.chaosopher.tigerlang.compiler.absyn.OpExp infixExp;
non terminal com.chaosopher.tigerlang.compiler.absyn.ExpList seqExp, seqExpAux; 
non terminal com.chaosopher.tigerlang.compiler.absyn.CallExp callExp; 
non terminal com.chaosopher.tigerlang.compiler.absyn.IfExp ifThen, ifThenElse; 
non terminal com.chaosopher.tigerlang.compiler.absyn.WhileExp whileExp; 
non terminal com.chaosopher.tigerlang.compiler.absyn.ForExp forExp; 
non terminal com.chaosopher.tigerlang.compiler.absyn.Exp negation; 

precedence left AND, OR;
precedence nonassoc EQ, NEQ, GT, LT, GE, LE;
precedence left PLUS, MINUS;
precedence left TIMES, DIVIDE;

start with program;


program ::= exp:e {: RESULT = e; :}
| decList:dl {: RESULT = dl; :}
;

tyDecList ::= tyDec:h {: RESULT = new com.chaosopher.tigerlang.compiler.absyn.TypeDec(h.pos, h.name, h.ty, null); :}
| tyDec:h tyDecList:t {: RESULT = new com.chaosopher.tigerlang.compiler.absyn.TypeDec(h.pos, h.name, h.ty, t);  :}
;

funcDecList ::= funcDec:h {: RESULT = new com.chaosopher.tigerlang.compiler.absyn.FunctionDec(h.pos, h.name, h.params, h.result, h.body, null); :}
| funcDec:h funcDecList:t {: RESULT = new com.chaosopher.tigerlang.compiler.absyn.FunctionDec(h.pos, h.name, h.params, h.result, h.body, t); :}
;

primDecList ::= primDec:h {: RESULT = new com.chaosopher.tigerlang.compiler.absyn.FunctionDec(h.pos, h.name, h.params, h.result, null, null); :}
| primDec:h primDecList:t {: RESULT = new com.chaosopher.tigerlang.compiler.absyn.FunctionDec(h.pos, h.name, h.params, h.result, null, t); :}
;

dec ::= tyDecList:td {: RESULT = td; :}
| varDec:vd {: RESULT = vd; :}
| funcDecList:fd {: RESULT = fd; :} 
| primDecList: fd {: RESULT = fd; :}
;

decList ::= dec:d decList:dl {: RESULT = new com.chaosopher.tigerlang.compiler.absyn.DecList(d, dl); :} 
| /* empty */ ;


tyDec ::= TYPE ID:i EQ ty:t {: RESULT = new com.chaosopher.tigerlang.compiler.absyn.TypeDec(ileft, com.chaosopher.tigerlang.compiler.symbol.Symbol.symbol(i), t, null); :};

ty ::= ID:i {: RESULT = new com.chaosopher.tigerlang.compiler.absyn.NameTy(ileft, com.chaosopher.tigerlang.compiler.symbol.Symbol.symbol(i)); :}
| recTy:rt {: RESULT = rt; :}
| arrTy:ar {: RESULT = ar; :};

arrTy ::= ARRAY OF ID:i {: RESULT = new com.chaosopher.tigerlang.compiler.absyn.ArrayTy(ileft, com.chaosopher.tigerlang.compiler.symbol.Symbol.symbol(i)); :};

fieldDecList ::= fieldDec:fd fieldDecListAux:fdla {: RESULT = new com.chaosopher.tigerlang.compiler.absyn.FieldList(fdleft, fd.name, fd.typ, fdla); :}
| /* empty */ ;

fieldDecListAux ::= COMMA fieldDec:fd fieldDecListAux:fdla {: RESULT = new com.chaosopher.tigerlang.compiler.absyn.FieldList(fdleft, fd.name, fd.typ, fdla); :}
| /* empty */;

fieldDec ::= ID:i COLON ID:ty {: RESULT = new com.chaosopher.tigerlang.compiler.absyn.FieldList(ileft, com.chaosopher.tigerlang.compiler.symbol.Symbol.symbol(i), new com.chaosopher.tigerlang.compiler.absyn.NameTy(tyleft, com.chaosopher.tigerlang.compiler.symbol.Symbol.symbol(ty)), null); :};

recTy ::= LBRACE fieldDecList:fl RBRACE {:  RESULT = new com.chaosopher.tigerlang.compiler.absyn.RecordTy(flleft, fl); :};


formalVarDec ::= ID:i COLON ty:t {: RESULT = new com.chaosopher.tigerlang.compiler.absyn.VarDec(ileft, com.chaosopher.tigerlang.compiler.symbol.Symbol.symbol(i), (com.chaosopher.tigerlang.compiler.absyn.NameTy)t, null); :}
;

formalVarDecList ::= formalVarDec:d formalVarDecListAux:dl  {: RESULT = new com.chaosopher.tigerlang.compiler.absyn.DecList(d, dl); :}
| /* empty */;


formalVarDecListAux ::= COMMA formalVarDec:d formalVarDecListAux:dl  {: RESULT = new com.chaosopher.tigerlang.compiler.absyn.DecList(d, dl); :}
| /* empty */;


funcDec ::= FUNCTION ID:i LPAREN formalVarDecList:fdl RPAREN EQ exp:e1 {: RESULT = new com.chaosopher.tigerlang.compiler.absyn.FunctionDec(ileft, com.chaosopher.tigerlang.compiler.symbol.Symbol.symbol(i), fdl, null, e1, null ); :}
| FUNCTION ID:i LPAREN formalVarDecList:fdl RPAREN COLON ID:ty EQ exp:e1 {: RESULT = new com.chaosopher.tigerlang.compiler.absyn.FunctionDec(ileft, com.chaosopher.tigerlang.compiler.symbol.Symbol.symbol(i), fdl, new com.chaosopher.tigerlang.compiler.absyn.NameTy(ileft, com.chaosopher.tigerlang.compiler.symbol.Symbol.symbol(ty)), e1, null ); :}
;

primDec ::= PRIMITIVE ID:i LPAREN formalVarDecList:fdl RPAREN {: RESULT = new com.chaosopher.tigerlang.compiler.absyn.FunctionDec(ileft, com.chaosopher.tigerlang.compiler.symbol.Symbol.symbol(i), fdl, null, null /* no body */, null ); :}
| PRIMITIVE ID:i LPAREN formalVarDecList:fdl RPAREN COLON ID:ty {: RESULT = new com.chaosopher.tigerlang.compiler.absyn.FunctionDec(ileft, com.chaosopher.tigerlang.compiler.symbol.Symbol.symbol(i), fdl, new com.chaosopher.tigerlang.compiler.absyn.NameTy(ileft, com.chaosopher.tigerlang.compiler.symbol.Symbol.symbol(ty)), null /* no body */, null ); :}
;

varDec ::= VAR ID:i ASSIGN exp:e {: RESULT = new com.chaosopher.tigerlang.compiler.absyn.VarDec(ileft, com.chaosopher.tigerlang.compiler.symbol.Symbol.symbol(i), null, e); :}
| VAR ID:i COLON ty:t ASSIGN exp:e {: RESULT = new com.chaosopher.tigerlang.compiler.absyn.VarDec(ileft, com.chaosopher.tigerlang.compiler.symbol.Symbol.symbol(i), (com.chaosopher.tigerlang.compiler.absyn.NameTy)t, e); :}
;



//https://stackoverflow.com/questions/26968665/bison-shift-reduce-conflict-tiger-compiler
lValue ::= ID:id  {: RESULT = new com.chaosopher.tigerlang.compiler.absyn.SimpleVar(idleft, com.chaosopher.tigerlang.compiler.symbol.Symbol.symbol(id)); :}
| lValue:lv DOT ID:i {: RESULT = new com.chaosopher.tigerlang.compiler.absyn.FieldVar(lvleft, lv, com.chaosopher.tigerlang.compiler.symbol.Symbol.symbol(i)); :} 
| lValue:lv LBRACK exp:e RBRACK {: RESULT = new com.chaosopher.tigerlang.compiler.absyn.SubscriptVar(lvleft, lv, e); :}
| ID:i LBRACK exp:e RBRACK {: RESULT = new com.chaosopher.tigerlang.compiler.absyn.SubscriptVar(ileft, new com.chaosopher.tigerlang.compiler.absyn.SimpleVar(ileft, com.chaosopher.tigerlang.compiler.symbol.Symbol.symbol(i)), e); :}
;

exp ::= lValue:lv {: RESULT = new com.chaosopher.tigerlang.compiler.absyn.VarExp(lvleft, lv); :}
| NIL:n {: RESULT = new com.chaosopher.tigerlang.compiler.absyn.NilExp(nleft); :} 
| INT:i {: RESULT = new com.chaosopher.tigerlang.compiler.absyn.IntExp(ileft, i); :}
| STRING:s {: RESULT = new com.chaosopher.tigerlang.compiler.absyn.StringExp(sleft, s); :} 
| seqExp:se {: RESULT = new com.chaosopher.tigerlang.compiler.absyn.SeqExp(seleft, se); :}
| callExp:ce {: RESULT = ce; :} 
| infixExp:ie {: RESULT = ie; :}
| arrCreate:ac {: RESULT = ac; :}
| recCreate:rc {: RESULT = rc; :}
| assignment:a {: RESULT = a; :}
| negation:n {: RESULT = n; :}
| ifThenElse:ite {: RESULT = ite; :}
| ifThen:it {: RESULT = it; :}
| whileExp:we {: RESULT = we; :} 
| forExp:fe {: RESULT = fe; :} 
| BREAK:b {: RESULT = new com.chaosopher.tigerlang.compiler.absyn.BreakExp(bleft); :}
| letExp:le {: RESULT = le; :}
| error exp
;

negation ::= MINUS exp:e1 {: RESULT = new com.chaosopher.tigerlang.compiler.absyn.OpExp(e1left, new com.chaosopher.tigerlang.compiler.absyn.IntExp(e1left,0), com.chaosopher.tigerlang.compiler.absyn.OpExp.MINUS, e1); :};

infixExp ::= exp:e1 PLUS exp:e2 {: RESULT = new com.chaosopher.tigerlang.compiler.absyn.OpExp(e1left, e1, com.chaosopher.tigerlang.compiler.absyn.OpExp.PLUS, e2); :}
| exp:e1 MINUS exp:e2 {: RESULT = new com.chaosopher.tigerlang.compiler.absyn.OpExp(e1left, e1, com.chaosopher.tigerlang.compiler.absyn.OpExp.MINUS, e2); :}
| exp:e1 TIMES exp:e2 {: RESULT = new com.chaosopher.tigerlang.compiler.absyn.OpExp(e1left, e1, com.chaosopher.tigerlang.compiler.absyn.OpExp.MUL, e2); :}
| exp:e1 DIVIDE exp:e2 {: RESULT = new com.chaosopher.tigerlang.compiler.absyn.OpExp(e1left, e1, com.chaosopher.tigerlang.compiler.absyn.OpExp.DIV, e2); :}
| exp:e1 EQ exp:e2 {: RESULT = new com.chaosopher.tigerlang.compiler.absyn.OpExp(e1left, e1, com.chaosopher.tigerlang.compiler.absyn.OpExp.EQ, e2); :}
| exp:e1 NEQ exp:e2 {: RESULT = new com.chaosopher.tigerlang.compiler.absyn.OpExp(e1left, e1, com.chaosopher.tigerlang.compiler.absyn.OpExp.NE, e2); :}
| exp:e1 GT exp:e2 {: RESULT = new com.chaosopher.tigerlang.compiler.absyn.OpExp(e1left, e1, com.chaosopher.tigerlang.compiler.absyn.OpExp.GT, e2); :}
| exp:e1 LT exp:e2 {: RESULT = new com.chaosopher.tigerlang.compiler.absyn.OpExp(e1left, e1, com.chaosopher.tigerlang.compiler.absyn.OpExp.LT, e2); :}
| exp:e1 GE exp:e2 {: RESULT = new com.chaosopher.tigerlang.compiler.absyn.OpExp(e1left, e1, com.chaosopher.tigerlang.compiler.absyn.OpExp.GE, e2); :}
| exp:e1 LE exp:e2 {: RESULT = new com.chaosopher.tigerlang.compiler.absyn.OpExp(e1left, e1, com.chaosopher.tigerlang.compiler.absyn.OpExp.LE, e2); :}
;

seqExp ::= LPAREN RPAREN
| LPAREN exp:e seqExpAux:sea RPAREN {: RESULT = new com.chaosopher.tigerlang.compiler.absyn.ExpList(e, sea); :};

seqExpAux ::= SEMICOLON exp:e seqExpAux:sea {: RESULT = new com.chaosopher.tigerlang.compiler.absyn.ExpList(e, sea); :}
| /* empty */;

callExp ::= ID:i LPAREN paramList:el RPAREN {: RESULT = new com.chaosopher.tigerlang.compiler.absyn.CallExp(ileft, com.chaosopher.tigerlang.compiler.symbol.Symbol.symbol(i), el); :};

paramList ::= exp:e paramListAux:a {: RESULT = new com.chaosopher.tigerlang.compiler.absyn.ExpList(e, a); :}
| /* empty */;

paramListAux ::= COMMA exp:e paramListAux:a {: RESULT = new com.chaosopher.tigerlang.compiler.absyn.ExpList(e, a); :}
| /* empty */;


expList ::= exp:e expListAux:a {: RESULT = new com.chaosopher.tigerlang.compiler.absyn.ExpList(e, a); :}
| /* empty */;

expListAux ::= SEMICOLON exp:e expListAux:a {: RESULT = new com.chaosopher.tigerlang.compiler.absyn.ExpList(e, a); :}
| /* empty */;

assignment ::= lValue:l ASSIGN exp:e {: RESULT = new com.chaosopher.tigerlang.compiler.absyn.AssignExp(lleft, l, e); :};

ifThen ::= IF exp:e1 THEN exp:e2 {: RESULT = new com.chaosopher.tigerlang.compiler.absyn.IfExp(e1left, e1, e2); :};

ifThenElse ::= IF exp:e1 THEN exp:e2 ELSE exp:e3 {: RESULT = new com.chaosopher.tigerlang.compiler.absyn.IfExp(e1left, e1, e2, e3); :}
| exp:e1 AND exp:e2 {: RESULT = new com.chaosopher.tigerlang.compiler.absyn.IfExp(e1left, e1, e2, new com.chaosopher.tigerlang.compiler.absyn.IntExp(e1left, 0)); :} 
| exp:e1 OR exp:e2 {: RESULT = new com.chaosopher.tigerlang.compiler.absyn.IfExp(e1left, e1, new com.chaosopher.tigerlang.compiler.absyn.IntExp(e1left, 1), e2); :} 
;


whileExp ::= WHILE exp:e1 DO exp:e2 {: RESULT = new com.chaosopher.tigerlang.compiler.absyn.WhileExp(e1left, (com.chaosopher.tigerlang.compiler.absyn.Exp)e1, (com.chaosopher.tigerlang.compiler.absyn.Exp)e2); :};

forExp ::= FOR ID:i ASSIGN exp:e0 TO exp:e1 DO exp:e2 {: RESULT = new com.chaosopher.tigerlang.compiler.absyn.ForExp(ileft, new com.chaosopher.tigerlang.compiler.absyn.VarDec(ileft, com.chaosopher.tigerlang.compiler.symbol.Symbol.symbol(i), null, e0), e1, e2); :};

letExp ::= LET decList:e1 IN expList:e2 END {: RESULT = new com.chaosopher.tigerlang.compiler.absyn.LetExp(e1left, (com.chaosopher.tigerlang.compiler.absyn.DecList)e1, (com.chaosopher.tigerlang.compiler.absyn.Exp)new com.chaosopher.tigerlang.compiler.absyn.SeqExp(e1left, e2)); :};


arrCreate ::= ID:i LBRACK exp:e1 RBRACK OF exp:e2 {: RESULT = new com.chaosopher.tigerlang.compiler.absyn.ArrayExp(ileft, com.chaosopher.tigerlang.compiler.symbol.Symbol.symbol(i), e1, e2); :};

recCreate ::= ID:i LBRACE fieldCreateList:fcl RBRACE {: RESULT = new com.chaosopher.tigerlang.compiler.absyn.RecordExp(ileft, com.chaosopher.tigerlang.compiler.symbol.Symbol.symbol(i), fcl); :};

fieldCreateList ::= fieldCreate:fc fieldCreateListAux:fcla {: RESULT = new com.chaosopher.tigerlang.compiler.absyn.FieldExpList(fcleft, fc.name, fc.init, fcla); :}
| /* empty */;

fieldCreateListAux ::= COMMA fieldCreate:fc fieldCreateListAux:fcla {: RESULT = new com.chaosopher.tigerlang.compiler.absyn.FieldExpList(fcleft, fc.name, fc.init, fcla); :}
| /* empty */;

fieldCreate ::= ID:i EQ exp:e {: RESULT = new com.chaosopher.tigerlang.compiler.absyn.FieldExpList(ileft, com.chaosopher.tigerlang.compiler.symbol.Symbol.symbol(i), e, null); :};
